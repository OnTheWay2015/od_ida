


 
0012DD48  |651452E8  返回到 LoginPan.651452E8 来自 LoginPan.6514447D
==============================================================================================================================================================================================
0012DD60  |300DB4FB  返回到 Common.300DB4FB 来自 Common.300DB3F2
==============================================================================================================================================================================================
0012DD70  |0012DD4C  返回到 0012DD4C
==============================================================================================================================================================================================
0012DD84  |6512EBB7  返回到 LoginPan.6512EBB7 来自 LoginPan.651451B6
==============================================================================================================================================================================================
0012DDAC  |300DB762  返回到 Common.300DB762 来自 Common.300DB508
==============================================================================================================================================================================================
0012DDC0  |6512FD7F  返回到 LoginPan.6512FD7F 来自 LoginPan.6512EABB
==============================================================================================================================================================================================
0012DDE0  |65138853  返回到 LoginPan.65138853 来自 LoginPan.6512FC9C
==============================================================================================================================================================================================
0012DE04  |30829411  返回到 GF.30829411
==============================================================================================================================================================================================
0012DE4C  |3082562B  返回到 GF.3082562B 来自 GF.30829384
==============================================================================================================================================================================================
0012DEC0  ]0012DEE0  返回到 0012DEE0
==============================================================================================================================================================================================
0012DEC4  |30918690  返回到 GF.30918690 来自 GF.Util::GF::DispatchFrameMsg
==============================================================================================================================================================================================
0012DEE4  |309192CB  返回到 GF.309192CB 来自 GF.30918658
==============================================================================================================================================================================================
0012DF1C  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
==============================================================================================================================================================================================
0012DF20  |77D2A013  返回到 user32.77D2A013 来自 user32.77D1875F
==============================================================================================================================================================================================
0012DF28  |30921FA5  返回到 GF.30921FA5
==============================================================================================================================================================================================
0012DF44  |30921211  返回到 GF.30921211
==============================================================================================================================================================================================
0012DF6C  |30922171  返回到 GF.30922171
==============================================================================================================================================================================================
0012DF84  |30801A54  返回到 GF.30801A54
==============================================================================================================================================================================================
0012DFD4  |65141C29  返回到 LoginPan.65141C29
==============================================================================================================================================================================================
0012DFDC  |0012EDB0  返回到 0012EDB0
==============================================================================================================================================================================================
0012E000  |30920907  返回到 GF.30920907
==============================================================================================================================================================================================
0012E01C  |30922171  返回到 GF.30922171
==============================================================================================================================================================================================
0012E034  |30801A54  返回到 GF.30801A54
==============================================================================================================================================================================================
0012E084  |65141C29  返回到 LoginPan.65141C29
==============================================================================================================================================================================================
0012E08C  |0012EDB0  返回到 0012EDB0
==============================================================================================================================================================================================
0012E090  |6516E249  返回到 LoginPan.6516E249 来自 LoginPan.6516E144
==============================================================================================================================================================================================
0012E094  |651416D8  返回到 LoginPan.651416D8 来自 LoginPan.6516E23F
==============================================================================================================================================================================================
0012E304  |7C930098  返回到 ntdll.7C930098 来自 ntdll.7C922AB0
==============================================================================================================================================================================================
0012E310  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
==============================================================================================================================================================================================
0012E318  |7C93003D  返回到 ntdll.7C93003D
==============================================================================================================================================================================================
0012E3D8  |7C93003D  返回到 ntdll.7C93003D
==============================================================================================================================================================================================
0012E3E8  |78134C58  返回到 msvcr80.78134C58 来自 msvcr80.78138CD9
==============================================================================================================================================================================================
0012E40C  |77D28DD9  返回到 user32.77D28DD9 来自 user32.77D28BFB
==============================================================================================================================================================================================
0012E454  |77D28DD9  返回到 user32.77D28DD9 来自 user32.77D28BFB
==============================================================================================================================================================================================
0012E470  |77D28D77  返回到 user32.77D28D77 来自 user32.77D28DB2
==============================================================================================================================================================================================
0012E480  |77D28D8B  返回到 user32.77D28D8B 来自 user32.77D18600
==============================================================================================================================================================================================
0012E4B4  |77D28D8B  返回到 user32.77D28D8B 来自 user32.77D18600
==============================================================================================================================================================================================
0012E4B8  |77D18734  返回到 user32.77D18734
==============================================================================================================================================================================================
0012E4E4  |77D18816  返回到 user32.77D18816 来自 user32.77D1870C
==============================================================================================================================================================================================
0012E4F0  |77D1885A  返回到 user32.77D1885A 来自 ntdll.RtlDeactivateActivationContextUnsafeFast
==============================================================================================================================================================================================
0012E4F8  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
==============================================================================================================================================================================================
0012E548  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
==============================================================================================================================================================================================
0012E54C  |77D2A013  返回到 user32.77D2A013 来自 user32.77D1875F
==============================================================================================================================================================================================
0012E57C  |77D2A039  返回到 user32.77D2A039 来自 user32.77D29FC2
==============================================================================================================================================================================================
0012E59C  |30801988  返回到 GF.30801988 来自 user32.CallWindowProcW
==============================================================================================================================================================================================
0012E5B8  |30801A70  返回到 GF.30801A70 来自 GF.30801970
==============================================================================================================================================================================================
0012E600  |77D18734  返回到 user32.77D18734
==============================================================================================================================================================================================
0012E62C  |77D18816  返回到 user32.77D18816 来自 user32.77D1870C
==============================================================================================================================================================================================
0012E638  |77D1885A  返回到 user32.77D1885A 来自 ntdll.RtlDeactivateActivationContextUnsafeFast
==============================================================================================================================================================================================
0012E640  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
==============================================================================================================================================================================================
0012E690  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
==============================================================================================================================================================================================
0012E694  |77D28EA0  返回到 user32.77D28EA0 来自 user32.77D1875F
==============================================================================================================================================================================================
0012E6B4  |77D28EAB  返回到 user32.77D28EAB 来自 user32.77D18600
==============================================================================================================================================================================================
0012E6E8  |7C930098  返回到 ntdll.7C930098 来自 ntdll.7C922AB0
==============================================================================================================================================================================================
0012E6F4  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
==============================================================================================================================================================================================
0012E6FC  |7C93003D  返回到 ntdll.7C93003D
==============================================================================================================================================================================================
0012E700  |01F61940  返回到 01F61940
==============================================================================================================================================================================================
0012E718  |77D188D1  返回到 user32.77D188D1 来自 user32.77D18860
==============================================================================================================================================================================================
0012E724  |77D188DA  返回到 user32.77D188DA 来自 user32.77D18600
==============================================================================================================================================================================================
0012E74C  |77D188DA  返回到 user32.77D188DA 来自 user32.77D18600
==============================================================================================================================================================================================
0012E750  |308F73A3  返回到 GF.308F73A3
==============================================================================================================================================================================================
0012E760  |01F8CCCC  返回到 01F8CCCC
==============================================================================================================================================================================================
0012E76C  |308FC256  返回到 GF.308FC256 来自 user32.ShowWindow
==============================================================================================================================================================================================
0012E790  |308B9D36  返回到 GF.308B9D36
==============================================================================================================================================================================================
0012E7BC  |7C93003D  返回到 ntdll.7C93003D
==============================================================================================================================================================================================
0012E7C0  |78134C39  返回到 msvcr80.78134C39 来自 ntdll.RtlFreeHeap
==============================================================================================================================================================================================
0012E7CC  |78134C58  返回到 msvcr80.78134C58 来自 msvcr80.78138CD9
==============================================================================================================================================================================================
0012E7D4  |01F61940  返回到 01F61940
==============================================================================================================================================================================================
0012E7E0  |77D28DD9  返回到 user32.77D28DD9 来自 user32.77D28BFB
==============================================================================================================================================================================================
0012E7FC  |77D28D77  返回到 user32.77D28D77 来自 user32.77D28DB2
==============================================================================================================================================================================================
0012E80C  |77D28D8B  返回到 user32.77D28D8B 来自 user32.77D18600
==============================================================================================================================================================================================
0012E82C  |7C930961  返回到 ntdll.7C930961 来自 ntdll.RtlLeaveCriticalSection
==============================================================================================================================================================================================
0012E850  |6515C84A  返回到 LoginPan.6515C84A
==============================================================================================================================================================================================
0012E87C  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
==============================================================================================================================================================================================
0012E884  |7C93003D  返回到 ntdll.7C93003D
==============================================================================================================================================================================================
0012E8A8  |6510AF6C  返回到 LoginPan.6510AF6C 来自 LoginPan.6516E22B
==============================================================================================================================================================================================
0012E8CC  |6515C8DD  返回到 LoginPan.6515C8DD 来自 LoginPan.6515C47E
==============================================================================================================================================================================================
0012E8E4  |77D18734  返回到 user32.77D18734
==============================================================================================================================================================================================
0012E910  |77D18816  返回到 user32.77D18816 来自 user32.77D1870C
==============================================================================================================================================================================================
0012E960  |77D28EA0  返回到 user32.77D28EA0 来自 user32.77D1875F
==============================================================================================================================================================================================
0012E978  |77D28EA0  返回到 user32.77D28EA0 来自 user32.77D1875F
==============================================================================================================================================================================================
0012E9B4  |77D2BD34  返回到 user32.77D2BD34
==============================================================================================================================================================================================
0012E9CC  |77D28EEC  返回到 user32.77D28EEC
==============================================================================================================================================================================================
0012E9F4  |7C92E453  返回到 ntdll.7C92E453
==============================================================================================================================================================================================
0012EA18  |77D2AF62  返回到 user32.77D2AF62
==============================================================================================================================================================================================
0012EA1C  |308F739B  返回到 GF.308F739B 来自 GF.308F72BF
==============================================================================================================================================================================================
0012EA38  |308F8B7B  返回到 GF.308F8B7B 来自 user32.ShowWindow
==============================================================================================================================================================================================
0012EA5C  |308F46E3  返回到 GF.308F46E3 来自 GF.308F8B0A
==============================================================================================================================================================================================
0012EA7C  |3080D325  返回到 GF.3080D325 来自 kernel32.InterlockedDecrement
==============================================================================================================================================================================================
0012EA90  |30807A8D  返回到 GF.30807A8D
==============================================================================================================================================================================================
0012EA94  |30807A94  返回到 GF.30807A94 来自 GF.30949737
==============================================================================================================================================================================================
0012EAA4  |30887493  返回到 GF.30887493 来自 GF.308F46D0
==============================================================================================================================================================================================
0012EABC  |3090E4A2  返回到 GF.3090E4A2
==============================================================================================================================================================================================
0012EAC8  |6510B4EB  返回到 LoginPan.6510B4EB
==============================================================================================================================================================================================
0012EAD8  |00AA75B3  返回到 AFUtil.00AA75B3
==============================================================================================================================================================================================
0012EB20  |78134C58  返回到 msvcr80.78134C58 来自 msvcr80.78138CD9
==============================================================================================================================================================================================
0012EB9C  |651329E0  返回到 LoginPan.651329E0 来自 AFUtil.Util::Misc::HideWnd_Animation
==============================================================================================================================================================================================
0012EBC8  |651333C0  返回到 LoginPan.651333C0 来自 LoginPan.65132921
==============================================================================================================================================================================================
0012EBDC  |65138821  返回到 LoginPan.65138821 来自 LoginPan.6513339D
==============================================================================================================================================================================================
0012EC00  |30829411  返回到 GF.30829411
==============================================================================================================================================================================================
0012EC48  |3082562B  返回到 GF.3082562B 来自 GF.30829384

==============================================================================================================================================================================================
0012ECC0  |30918690  返回到 GF.30918690 来自 GF.Util::GF::DispatchFrameMsg
Util::GF *__stdcall sub_30918658(Util::GF *a1, struct IGFFrame *a2, struct tagBaseArg *a3, int *a4, __int32 *a5)
{
  Util::GF *result; // eax@2
  struct IGFElement *v6; // [sp+0h] [bp-4h]@0

  if ( Util::GF::IsValidGFElement(a1, v6) )
  {
    result = Util::GF::DispatchFrameMsg(a1, a2, a3, a4, a5);
  }
  else
  {
    sub_309183DA(a1);
    result = (Util::GF *)-2147467259;
  }
  return result;
}

============================================================================================================================================================================================== 
0012ECE0  |309198ED  返回到 GF.309198ED 来自 GF.30918658

signed int __stdcall sub_3091988F(int a1, int a2, _DWORD *a3, struct tagBaseArg *a4)
{
  int v4; // esi@3
  Util::GF *v5; // ST00_4@4
  signed int result; // eax@5
  int Dst; // [sp+8h] [bp-28h]@4
  char v8; // [sp+10h] [bp-20h]@4
  int v9; // [sp+18h] [bp-18h]@4
  int v10; // [sp+1Ch] [bp-14h]@4

  if ( a3
    && a4
    && (v4 = a1, *(_DWORD *)(a1 + 40))
    && (Dst = 0,
        memset(&v8, 0, 0x20u),
        sub_3091791E(&Dst),
        v10 = a2,
        v5 = *(Util::GF **)(v4 + 40),
        Dst = 906,
        v9 = 0,
        a1 = 0,
        (signed int)sub_30918658(v5, (struct IGFFrame *)&Dst, a4, &a1, 0) >= 0) )
  {
    *a3 = v9;
    result = 0;
  }
  else
  {
    result = -2147467259;
  }
  return result;
}

==============================================================================================================================================================================================
0012ED30  |30921784  返回到 GF.30921784

.text:30921781   call    dword ptr [ecx+3Ch]

int __thiscall sub_30921760(int this, int a2, int a3, _DWORD *a4)
{
  int v4; // edi@1
  int result; // eax@1
  int v6; // [sp+4h] [bp-4h]@2

  v4 = this;
  result = *(_DWORD *)(this + 36);
  if ( result )
  {
    v6 = 0;
    result = (*(int (__stdcall **)(int, int, int *, _DWORD *))(*(_DWORD *)result + 60))(result, a3, &v6, a4);
    if ( result >= 0 )
    {
      if ( *a4 )
      {
        if ( !v6 )
          result = DestroyWindow(*(HWND *)(v4 + 4));
      }
    }
  }
  return result;
}

==============================================================================================================================================================================================
0012ED54  |309208F6  返回到 GF.309208F6
.text:309208F3                 call    dword ptr [edx+20h]

LRESULT __thiscall sub_3092072C(void *this, UINT Msg, WPARAM wParam, LPARAM lParam, int a5)
{
  int v5; // eax@1
  LRESULT result; // eax@9

  v5 = a5;
  *(_DWORD *)a5 = 0;
  if ( Msg == 80 || Msg == 81 )
  {
    *(_DWORD *)a5 = 1;
    result = DefWindowProcW(*((HWND *)this + 1), Msg, wParam, lParam);
  }
  else
  {
    if ( !*((_DWORD *)this + 6) && Msg != 256 && Msg != 260 && Msg != 261 && Msg != 257 && Msg != 522 )
      return 0;
    if ( Msg > 0x1C )
    {
      if ( Msg > 0x125 )
      {
        if ( Msg > 0x231 )
        {
          if ( Msg > 0x291 )
          {
            if ( Msg > 0x303 )
            {
              if ( Msg == 772 )
              {
                (*(void (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 304))(*((_DWORD *)this + 1), a5);
                return 0;
              }
              if ( Msg == 786 )
              {
                (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, unsigned int, int))(*(_DWORD *)this + 80))(
                  *((_DWORD *)this + 1),
                  wParam,
                  (unsigned __int16)lParam,
                  (unsigned int)lParam >> 16,
                  a5);
                return 0;
              }
              if ( Msg == 798 )
                return (*(int (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 280))(
                         *((_DWORD *)this + 1),
                         wParam,
                         lParam,
                         a5);
            }
            else
            {
              if ( Msg == 771 )
              {
                (*(void (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 300))(*((_DWORD *)this + 1), a5);
                return 0;
              }
              if ( Msg == 675 )
              {
                (*(void (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 128))(
                  *((_DWORD *)this + 1),
                  wParam,
                  lParam,
                  a5);
                return 0;
              }
              if ( Msg == 768 )
              {
                (*(void (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 296))(*((_DWORD *)this + 1), a5);
                return 0;
              }
              if ( Msg == 769 )
              {
                (*(void (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 288))(*((_DWORD *)this + 1), a5);
                return 0;
              }
              if ( Msg == 770 )
              {
                (*(void (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 292))(*((_DWORD *)this + 1), a5);
                return 0;
              }
            }
          }
          else
          {
            if ( Msg == 657 )
              return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 340))(
                       *((_DWORD *)this + 1),
                       657,
                       wParam,
                       lParam,
                       a5);
            if ( Msg > 0x284 )
            {
              if ( Msg == 645 )
                return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 324))(
                         *((_DWORD *)this + 1),
                         645,
                         wParam,
                         lParam,
                         a5);
              if ( Msg == 646 )
                return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 328))(
                         *((_DWORD *)this + 1),
                         646,
                         wParam,
                         lParam,
                         a5);
              if ( Msg == 648 )
                return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 332))(
                         *((_DWORD *)this + 1),
                         648,
                         wParam,
                         lParam,
                         a5);
              if ( Msg == 656 )
                return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 336))(
                         *((_DWORD *)this + 1),
                         656,
                         wParam,
                         lParam,
                         a5);
            }
            else
            {
              if ( Msg == 644 )
                return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 320))(
                         *((_DWORD *)this + 1),
                         644,
                         wParam,
                         lParam,
                         a5);
              if ( Msg == 562 )
                return (*(int (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 72))(*((_DWORD *)this + 1), a5);
              if ( Msg == 641 )
                return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 308))(
                         *((_DWORD *)this + 1),
                         641,
                         wParam,
                         lParam,
                         a5);
              if ( Msg == 642 )
                return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 312))(
                         *((_DWORD *)this + 1),
                         642,
                         wParam,
                         lParam,
                         a5);
              if ( Msg == 643 )
                return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 316))(
                         *((_DWORD *)this + 1),
                         643,
                         wParam,
                         lParam,
                         a5);
            }
          }
        }
        else
        {
          if ( Msg == 561 )
            return (*(int (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 52))(*((_DWORD *)this + 1), a5);
          switch ( Msg )
          {
            case 0x216u:
              (*(void (__stdcall **)(_DWORD, LPARAM, int))(*(_DWORD *)this + 144))(*((_DWORD *)this + 1), lParam, a5);
              return 0;
            case 0x214u:
              (*(void (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 236))(
                *((_DWORD *)this + 1),
                wParam,
                lParam,
                a5);
              return 0;
            case 0x211u:
              LOBYTE(v5) = wParam != 0;
              return (*(int (__stdcall **)(_DWORD, int, int))(*(_DWORD *)this + 48))(*((_DWORD *)this + 1), v5, a5);
            case 0x212u:
              LOBYTE(v5) = wParam != 0;
              return (*(int (__stdcall **)(_DWORD, int, int))(*(_DWORD *)this + 68))(*((_DWORD *)this + 1), v5, a5);
            case 0x201u:
              (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 100))(
                *((_DWORD *)this + 1),
                0,
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x202u:
              (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 104))(
                *((_DWORD *)this + 1),
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x203u:
              (*(void (__stdcall **)(_DWORD, signed int, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 100))(
                *((_DWORD *)this + 1),
                1,
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x204u:
              (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 108))(
                *((_DWORD *)this + 1),
                0,
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x205u:
              (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 112))(
                *((_DWORD *)this + 1),
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x206u:
              (*(void (__stdcall **)(_DWORD, signed int, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 108))(
                *((_DWORD *)this + 1),
                1,
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x207u:
              (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 116))(
                *((_DWORD *)this + 1),
                0,
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x208u:
              (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 120))(
                *((_DWORD *)this + 1),
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x209u:
              (*(void (__stdcall **)(_DWORD, signed int, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 116))(
                *((_DWORD *)this + 1),
                1,
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x200u:
              (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 132))(
                *((_DWORD *)this + 1),
                (signed __int16)lParam,
                SHIWORD(lParam),
                wParam,
                a5);
              return 0;
            case 0x20Au:
              (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, int))(*(_DWORD *)this + 136))(
                *((_DWORD *)this + 1),
                (signed __int16)lParam,
                SHIWORD(lParam),
                SHIWORD(wParam),
                (signed __int16)wParam,
                a5);
              return 0;
            default:
              break;
          }
        }
      }
      else
      {
        if ( Msg == 293 )
          return (*(int (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 272))(
                   *((_DWORD *)this + 1),
                   wParam,
                   lParam,
                   a5);
        if ( Msg > 0xA3 )
        {
          if ( Msg > 0x105 )
          {
            if ( Msg == 262 )
            {
              (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, int))(*(_DWORD *)this + 256))(
                *((_DWORD *)this + 1),
                wParam,
                (signed __int16)lParam,
                a5);
              return 0;
            }
            if ( Msg == 269 )
              return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 344))(
                       *((_DWORD *)this + 1),
                       269,
                       wParam,
                       lParam,
                       a5);
            if ( Msg == 270 )
              return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 348))(
                       *((_DWORD *)this + 1),
                       270,
                       wParam,
                       lParam,
                       a5);
            if ( Msg == 271 )
              return (*(int (__stdcall **)(_DWORD, signed int, WPARAM, LPARAM, int))(*(_DWORD *)this + 352))(
                       *((_DWORD *)this + 1),
                       271,
                       wParam,
                       lParam,
                       a5);
            if ( Msg == 272 )
              return (*(int (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 84))(
                       *((_DWORD *)this + 1),
                       wParam,
                       lParam,
                       a5);
            if ( Msg == 274 )
            {
              (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, _DWORD, int))(*(_DWORD *)this + 240))(
                *((_DWORD *)this + 1),
                wParam,
                (signed __int16)lParam,
                SHIWORD(lParam),
                a5);
              return 0;
            }
            if ( Msg == 279 )
            {
              (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, unsigned int, int))(*(_DWORD *)this + 276))(
                *((_DWORD *)this + 1),
                wParam,
                (unsigned __int16)lParam,
                (unsigned int)lParam >> 16,
                a5);
              return 0;
            }
          }
          else
          {
            if ( Msg == 261 )
            {
              (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, _DWORD, unsigned int, int))(*(_DWORD *)this + 252))(
                *((_DWORD *)this + 1),
                wParam,
                0,
                (signed __int16)lParam,
                (unsigned int)lParam >> 16,
                a5);
              return 0;
            }
            if ( Msg > 0x100 )
            {
              if ( Msg == 257 )
              {
                (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, _DWORD, unsigned int, int))(*(_DWORD *)this + 92))(
                  *((_DWORD *)this + 1),
                  wParam,
                  0,
                  (signed __int16)lParam,
                  (unsigned int)lParam >> 16,
                  a5);
                return 0;
              }
              if ( Msg == 258 )
              {
                (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, int))(*(_DWORD *)this + 28))(
                  *((_DWORD *)this + 1),
                  wParam,
                  (signed __int16)lParam,
                  a5);
                return 0;
              }
              if ( Msg == 260 )
              {
                (*(void (__stdcall **)(_DWORD, WPARAM, signed int, _DWORD, unsigned int, int))(*(_DWORD *)this + 248))(
                  *((_DWORD *)this + 1),
                  wParam,
                  1,
                  (signed __int16)lParam,
                  (unsigned int)lParam >> 16,
                  a5);
                return 0;
              }
            }
            else
            {
              if ( Msg == 256 )
              {
                (*(void (__stdcall **)(_DWORD, WPARAM, signed int, _DWORD, unsigned int, int))(*(_DWORD *)this + 88))(
                  *((_DWORD *)this + 1),
                  wParam,
                  1,
                  (signed __int16)lParam,
                  (unsigned int)lParam >> 16,
                  a5);
                return 0;
              }
              if ( Msg == 164 )
              {
                (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 180))(
                  *((_DWORD *)this + 1),
                  0,
                  (signed __int16)lParam,
                  SHIWORD(lParam),
                  wParam,
                  a5);
                return 0;
              }
              if ( Msg == 165 )
              {
                (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 184))(
                  *((_DWORD *)this + 1),
                  (signed __int16)lParam,
                  SHIWORD(lParam),
                  wParam,
                  a5);
                return 0;
              }
              if ( Msg == 167 )
              {
                (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 188))(
                  *((_DWORD *)this + 1),
                  0,
                  (signed __int16)lParam,
                  SHIWORD(lParam),
                  wParam,
                  a5);
                return 0;
              }
              if ( Msg == 168 )
              {
                (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 192))(
                  *((_DWORD *)this + 1),
                  (signed __int16)lParam,
                  SHIWORD(lParam),
                  wParam,
                  a5);
                return 0;
              }
            }
          }
        }
        else
        {
          if ( Msg == 163 )
          {
            (*(void (__stdcall **)(_DWORD, signed int, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 176))(
              *((_DWORD *)this + 1),
              1,
              (signed __int16)lParam,
              SHIWORD(lParam),
              wParam,
              a5);
            return 0;
          }
          if ( Msg > 0x81 )
          {
            if ( Msg > 0x86 )
            {
              if ( Msg == 160 )
              {
                (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 196))(
                  *((_DWORD *)this + 1),
                  (signed __int16)lParam,
                  SHIWORD(lParam),
                  wParam,
                  a5);
                return 0;
              }
              if ( Msg == 161 )
              {
                (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 168))(
                  *((_DWORD *)this + 1),
                  0,
                  (signed __int16)lParam,
                  SHIWORD(lParam),
                  wParam,
                  a5);
                return 0;
              }
              if ( Msg == 162 )
              {
                (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, WPARAM, int))(*(_DWORD *)this + 172))(
                  *((_DWORD *)this + 1),
                  (signed __int16)lParam,
                  SHIWORD(lParam),
                  wParam,
                  a5);
                return 0;
              }
            }
            else
            {
              if ( Msg == 134 )
                return (*(int (__stdcall **)(_DWORD, WPARAM, _DWORD, _DWORD, int))(*(_DWORD *)this + 148))(
                         *((_DWORD *)this + 1),
                         wParam,
                         0,
                         0,
                         a5);
              if ( Msg == 130 )
              {
                (*(void (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 160))(*((_DWORD *)this + 1), a5);
                return 0;
              }
              if ( Msg == 131 )
                return (*(int (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 152))(
                         *((_DWORD *)this + 1),
                         wParam,
                         lParam,
                         a5);
              if ( Msg == 132 )
                return (*(int (__stdcall **)(_DWORD, _DWORD, _DWORD, int))(*(_DWORD *)this + 200))(
                         *((_DWORD *)this + 1),
                         (signed __int16)lParam,
                         SHIWORD(lParam),
                         a5);
              if ( Msg == 133 )
              {
                (*(void (__stdcall **)(_DWORD, WPARAM, int))(*(_DWORD *)this + 164))(*((_DWORD *)this + 1), wParam, a5);
                return 0;
              }
            }
          }
          else
          {
            if ( Msg == 129 )
              return (*(int (__stdcall **)(_DWORD, LPARAM, int))(*(_DWORD *)this + 156))(
                       *((_DWORD *)this + 1),
                       lParam,
                       a5);
            if ( Msg > 0x46 )
            {
              if ( Msg == 71 )
              {
                (*(void (__stdcall **)(_DWORD, LPARAM, int))(*(_DWORD *)this + 216))(*((_DWORD *)this + 1), lParam, a5);
                return 0;
              }
              if ( Msg == 78 )
                return (*(int (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 204))(
                         *((_DWORD *)this + 1),
                         wParam,
                         lParam,
                         a5);
              if ( Msg == 126 )
              {
                (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, WPARAM, int))(*(_DWORD *)this + 44))(
                  *((_DWORD *)this + 1),
                  wParam,
                  (unsigned __int16)lParam,
                  wParam >> 16,
                  a5);
                return 0;
              }
            }
            else
            {
              if ( Msg == 70 )
                return (*(int (__stdcall **)(_DWORD, LPARAM, int))(*(_DWORD *)this + 212))(
                         *((_DWORD *)this + 1),
                         lParam,
                         a5);
              if ( Msg == 32 )
                return (*(int (__stdcall **)(_DWORD, WPARAM, _DWORD, unsigned int, int))(*(_DWORD *)this + 224))(
                         *((_DWORD *)this + 1),
                         wParam,
                         (unsigned __int16)lParam,
                         (unsigned int)lParam >> 16,
                         a5);
              if ( Msg == 33 )
                return (*(int (__stdcall **)(_DWORD, WPARAM, _DWORD, unsigned int, int))(*(_DWORD *)this + 124))(
                         *((_DWORD *)this + 1),
                         wParam,
                         (unsigned __int16)lParam,
                         (unsigned int)lParam >> 16,
                         a5);
              if ( Msg == 36 )
              {
                (*(void (__stdcall **)(_DWORD, LPARAM, int))(*(_DWORD *)this + 76))(*((_DWORD *)this + 1), lParam, a5);
                return 0;
              }
              if ( Msg == 61 )
                return (*(int (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 284))(
                         *((_DWORD *)this + 1),
                         wParam,
                         lParam,
                         a5);
            }
          }
        }
      }
    }
    else
    {
      if ( Msg == 28 )
      {
        (*(void (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 24))(
          *((_DWORD *)this + 1),
          wParam,
          lParam,
          a5);
        return 0;
      }
      if ( Msg > 0xA )
      {
        if ( Msg == 15 )
        {
          (*(void (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 208))(*((_DWORD *)this + 1), a5);
          return 0;
        }
        if ( Msg == 16 )
        {
          (*(void (__stdcall **)(_DWORD, WPARAM, int))(*(_DWORD *)this + 32))(*((_DWORD *)this + 1), wParam, a5);
          return 0;
        }
        if ( Msg == 17 )
          return (unsigned __int16)(*(int (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 220))(
                                     *((_DWORD *)this + 1),
                                     a5);
        if ( Msg == 20 )
          return (*(int (__stdcall **)(_DWORD, WPARAM, int))(*(_DWORD *)this + 64))(*((_DWORD *)this + 1), wParam, a5);
        if ( Msg == 22 )
        {
          (*(void (__stdcall **)(_DWORD, WPARAM, int))(*(_DWORD *)this + 60))(*((_DWORD *)this + 1), wParam, a5);
          return 0;
        }
        if ( Msg == 24 )
        {
          (*(void (__stdcall **)(_DWORD, WPARAM, LPARAM, int))(*(_DWORD *)this + 244))(
            *((_DWORD *)this + 1),
            wParam,
            lParam,
            a5);
          return 0;
        }
      }
      else
      {
        if ( Msg == 10 )
        {
          LOBYTE(v5) = wParam == 1;
          (*(void (__stdcall **)(_DWORD, int, int))(*(_DWORD *)this + 56))(*((_DWORD *)this + 1), v5, a5);
          return 0;
        }
        if ( Msg == 1 )
          return ((*(int (__stdcall **)(_DWORD, LPARAM, int))(*(_DWORD *)this + 36))(*((_DWORD *)this + 1), lParam, a5) != 0)
               - 1;
        if ( Msg == 2 )
        {
          (*(void (__stdcall **)(_DWORD, int))(*(_DWORD *)this + 40))(*((_DWORD *)this + 1), a5);
          return 0;
        }
        if ( Msg == 3 )
        {
          (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, int))(*(_DWORD *)this + 140))(
            *((_DWORD *)this + 1),
            (signed __int16)lParam,
            SHIWORD(lParam),
            a5);
          return 0;
        }
        if ( Msg == 5 )
        {
          (*(void (__stdcall **)(_DWORD, WPARAM, _DWORD, _DWORD, int))(*(_DWORD *)this + 232))(
            *((_DWORD *)this + 1),
            wParam,
            (signed __int16)lParam,
            SHIWORD(lParam),
            a5);
          return 0;
        }
        if ( Msg == 6 )
        {
          (*(void (__stdcall **)(_DWORD, _DWORD, LPARAM, WPARAM, int))(*(_DWORD *)this + 20))(
            *((_DWORD *)this + 1),
            (unsigned __int16)wParam,
            lParam,
            wParam >> 16,
            a5);
          return 0;
        }
        if ( Msg == 7 )
        {
          (*(void (__stdcall **)(_DWORD, WPARAM, int))(*(_DWORD *)this + 228))(*((_DWORD *)this + 1), wParam, a5);
          return 0;
        }
        if ( Msg == 8 )
        {
          (*(void (__stdcall **)(_DWORD, WPARAM, int))(*(_DWORD *)this + 96))(*((_DWORD *)this + 1), wParam, a5);
          return 0;
        }
      }
    }
    if ( Msg - 1024 > 0x7BFF )
    {
      if ( Msg - 0x8000 > 0x3FFF )
      {
        if ( Msg - 49152 > 0x3FFF )
          return 0;
        result = (*(int (__stdcall **)(_DWORD, UINT, WPARAM, LPARAM, int))(*(_DWORD *)this + 268))(
                   *((_DWORD *)this + 1),
                   Msg,
                   wParam,
                   lParam,
                   a5);
      }
      else
      {
        result = (*(int (__stdcall **)(_DWORD, UINT, WPARAM, LPARAM, int))(*(_DWORD *)this + 264))(
                   *((_DWORD *)this + 1),
                   Msg,
                   wParam,
                   lParam,
                   a5);
      }
    }
    else
    {
      result = (*(int (__stdcall **)(_DWORD, UINT, WPARAM, LPARAM, int))(*(_DWORD *)this + 260))(
                 *((_DWORD *)this + 1),
                 Msg,
                 wParam,
                 lParam,
                 a5);
    }
  }
  return result;
}
==============================================================================================================================================================================================
0012ED74  |30922171  返回到 GF.30922171
.text:3092216E                 call    dword ptr [eax+10h] //sub_3092072C


//@a3 为 Msg 
//@a4 为 wParam
//@a5 为 lParam
//@a6 为 指向 this 的指针
int __thiscall sub_30922146(void *this, int a2, unsigned int a3, int a4, int a5, int *a6, signed int a7) //被其他模块调用?
{
  int v7; // eax@3
  int v8; // eax@3
  bool v9; // zf@3
  int result; // eax@4

  result = 0;
  if ( !a7 && a3 <= 0xFFFF )
  {
    v7 = *(_DWORD *)this;
    a7 = 1;
    v8 = (*(int (__stdcall **)(unsigned int, int, int, signed int *))(v7 + 16))(a3, a4, a5, &a7); //LRESULT __thiscall sub_3092072C(void *this, UINT Msg, WPARAM wParam, LPARAM lParam, int a5)
    v9 = a7 == 0;
    *a6 = v8;
    if ( !v9 )
      result = 1;
  }
  return result;
}

---------
//控件基类？
.rdata:309ADC48 off_309ADC48    dd offset sub_30922146  ; DATA XREF: sub_309220AE+11o
.rdata:309ADC4C                 dd offset unknown_libname_310 ; Microsoft VisualC 2-11/net runtime  // 引用 HWND
---------

Direction Type Address         Text                                        
                                     
Up        o    sub_309220AE+11 mov     dword ptr [esi], offset off_309ADC48
Up        o    sub_309221ED+1D mov     dword ptr [esi], offset off_309ADC48
---------

_DWORD *__thiscall sub_309220AE(int this)
{
  int v1; // esi@1
  HWND v2; // ecx@1
  _DWORD *result; // eax@3
  int v4; // ecx@4
  void *v5; // esi@5
  HWND v6; // [sp-14h] [bp-34h]@2
  signed int v7; // [sp-10h] [bp-30h]@2
  int v8; // [sp-Ch] [bp-2Ch]@2
  HWND v9; // [sp-8h] [bp-28h]@1
  HWND *v10; // [sp+Ch] [bp-14h]@2
  int v11; // [sp+10h] [bp-10h]@1
  int v12; // [sp+1Ch] [bp-4h]@1

  v1 = this;
  v11 = this;
  *(_DWORD *)this = &off_309ADC48;  // -----------引用 off_309ADC48
  v9 = *(HWND *)(this + 4);			// -----------引用 off_309ADC48.[4] 为 HWND
  v12 = 1;
  if ( IsWindow(v9) )
  {
    v9 = v2;
    v8 = 0;
    v7 = 25;
    v6 = v2;
    v10 = &v6;
    CTXStringW::CTXStringW(&v6, &unk_309ADC40);
    Util::Sys::GetCurrentCallStack(&v9, v6, v7, v8);
    sub_30812AA2(
      L"file",
      22,
      L"func",
      2,
      L"Crash.Expection",
      L"WinMsgReceiver\u9500\u6bc1\uff0c\u4f46\u662f\u7a97\u53e3\u6ca1\u6709\u9500\u6bc1\u3002\n"
       " \u5f53\u524d\u5806\u6808\u4e3a: \n"
       " %s",
      (char)v9);
  }
  
  result = *(_DWORD **)(v1 + 36); // -----------引用  off_309ADC48.[36] 为
  
  LOBYTE(v12) = 0;
  if ( result )
  {
    v4 = *result;
    v9 = (HWND)result;
    result = (_DWORD *)(*(int (__stdcall **)(_DWORD *))(v4 + 8))(result);
  }
  v5 = *(void **)(v1 + 20);	// -----------引用  off_309ADC48.[20] 为
  v12 = -1;
  if ( v5 )
    result = (_DWORD *)std::allocator<char>::allocate(v5);
  return result;
}


int __thiscall sub_309221ED(int this)
{
  int v1; // esi@1
  _DWORD *v2; // edi@1

  v1 = this;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = DefWindowProcW;
  *(_DWORD *)this = &off_309ADC48; // -----------引用  off_309ADC48
  *(_DWORD *)(this + 36) = 0;
  v2 = (_DWORD *)(this + 40);
  *(_BYTE *)(this + 56) = 0;
  *(_BYTE *)(this + 57) = 0;
  memset((void *)(this + 40), 0, 0x10u);
  *v2 = 16;
  SystemParametersInfoW(0x66u, 0, (PVOID)(v1 + 52), 0); 
  //BOOL SystemParametersInfo(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinlni)
  //查询或设置系统级参数
  // uiAction 对应宏 C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\WinUser.h
  //	#define SPI_GETMOUSEHOVERTIME      0x0066   
  //		用于Windows NT 4.0及以后版本、Windows 98，获得在 TrackMouseEvent 事件中，为产生WM_MOUSEOVER消息而鼠标指针必须停留在矩形框内的时间，单位为毫秒。参数 pvParam 必须指向一个UINT变量以接收该时间值。
  
  return v1;
}

==============================================================================================================================================================================================
0012ED8C  |30801A54  返回到 GF.30801A54
.text:30801A52                 call    dword ptr [eax]   //sub_30922146

//打开界面设置 winproc,  按操作返回一个触发响应的控件? 
int __stdcall sub_30801A10(int a1, UINT Msg, WPARAM wParam, LPARAM lParam)
{
  int v4; // esi@1
  UINT v5; // edi@1
  LPARAM v6; // ST0C_4@1
  WPARAM v7; // ST08_4@1
  int v8; // ST00_4@1
  LONG v9; // eax@5
  int v10; // eax@8
  int v11; // ecx@10
  int (__thiscall **v12)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // eax@10
  char v14; // [sp+8h] [bp-28h]@1
  LONG v15; // [sp+2Ch] [bp-4h]@4

  v4 = a1;
  v5 = Msg;
  sub_3080184C((int)&v14, *(_DWORD *)(a1 + 4), Msg, wParam, lParam, 1);
  v6 = lParam;
  Msg = *(_DWORD *)(v4 + 24);
  v7 = wParam;
  v8 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)(v4 + 24) = &v14;
  if ( !(**(int (__thiscall ***)(int, int, UINT, WPARAM, LPARAM, int *, _DWORD))v4)(v4, v8, v5, v7, v6, &a1, 0) )  //sub_30922146
  {
    if ( v5 == 130 )
    {//Msg == 130 特别处理？
      v15 = GetWindowLongW(*(HWND *)(v4 + 4), -4);
      a1 = sub_30801970(v4, 0x82u, wParam, lParam);
      if ( *(LRESULT (__stdcall **)(HWND, UINT, WPARAM, LPARAM))(v4 + 32) != DefWindowProcW )
      {
        v9 = GetWindowLongW(*(HWND *)(v4 + 4), -4);
        if ( v9 == v15 )
          SetWindowLongW(*(HWND *)(v4 + 4), -4, *(_DWORD *)(v4 + 32)); //替换 winproc?
      }
      *(_DWORD *)(v4 + 28) |= 1u;
    }
    else
    {
      a1 = sub_30801970(v4, v5, wParam, lParam);
    }
  }
  v10 = *(_DWORD *)(v4 + 28);
  if ( !(v10 & 1) || Msg )
  {
    *(_DWORD *)(v4 + 24) = Msg;
  }
  else
  {
    v11 = *(_DWORD *)(v4 + 4);
    *(_DWORD *)(v4 + 28) = v10 & 0xFFFFFFFE;
    v12 = *(int (__thiscall ***)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))v4;
    *(_DWORD *)(v4 + 4) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    ((void (__thiscall *)(int, int))v12[3])(v4, v11);
  }
  return a1;
}



==============================================================================================================================================================================================
0012EDDC  |65141C29  返回到 LoginPan.65141C29
.text:65141C27 878                 call    eax ; dwNewLong  //sub_30801A10


//dwNewLong 在哪里赋值? sub_65141C2E
.data:651CB030     dwNewLong       dd ?                    ; DATA XREF: sub_6513FA5D+11r
.data:651CB034     hWnd            dd ?                    ; DATA XREF: sub_6513FA5D+20r  // HWND hWnd

//处理特别消息?无特别则是控件消息?
//LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
int __thiscall sub_65140CBD(HWND *this, HWND a2, UINT Msg, __int16 *wParam, LPARAM a5)
{
  int *v5; // esi@3
  wchar_t *v7; // eax@5
  int v8; // ecx@5
  char *v9; // eax@6
  bool v10; // zf@6
  int v11; // ecx@8
  int v12; // ecx@9
  int v13; // ecx@10
  int v14; // ecx@12
  signed int v15; // ecx@14
  HWND v16; // eax@16
  HWND v17; // edi@16
  HWND v18; // ebx@16
  wchar_t *v19; // eax@16
  int v20; // ecx@16
  HWND v21; // edi@16
  wchar_t *v22; // eax@16
  int v23; // ecx@16
  HWND v24; // esi@18
  HWND v25; // ebx@18
  wchar_t *v26; // eax@19
  wchar_t *v27; // eax@19
  int v28; // eax@23
  char *v29; // edi@24
  signed int v30; // ecx@24
  signed int v31; // ecx@28
  const wchar_t *v32; // edx@30
  int v33; // ecx@30
  __int16 v34; // ax@30
  int **v35; // eax@34
  int *v36; // eax@34
  int v37; // ecx@34
  char *v38; // ecx@40
  int v39; // ecx@40
  int v40; // ecx@42
  int v41; // ecx@45
  HWND v42; // eax@47
  int v43; // ecx@50
  const wchar_t *v44; // edx@55
  int v45; // ecx@55
  __int16 v46; // ax@55
  _DWORD *v47; // eax@59
  int *v48; // ecx@61
  const wchar_t *v49; // edx@68
  int v50; // ecx@68
  __int16 v51; // ax@68
  _DWORD *v52; // eax@72
  const wchar_t *v53; // edx@78
  int v54; // ecx@78
  __int16 v55; // ax@78
  _DWORD *v56; // eax@82
  int v57; // esi@88
  int v58; // eax@90
  int v59; // ecx@91
  const wchar_t *v60; // edx@94
  int v61; // ecx@94
  __int16 v62; // ax@94
  _DWORD *v63; // eax@98
  HWND v64; // esi@105
  int v65; // eax@106
  int v66; // esi@106
  int v67; // eax@106
  HWND v68; // esi@106
  int v69; // eax@106
  int v70; // esi@106
  int v71; // eax@106
  const wchar_t *v72; // edx@107
  int v73; // ecx@107
  __int16 v74; // ax@107
  _DWORD *v75; // eax@111
  int *v76; // edi@115
  int v77; // eax@116
  int v78; // esi@116
  int v79; // eax@116
  const wchar_t *v80; // edx@117
  int v81; // ecx@117
  __int16 v82; // ax@117
  _DWORD *v83; // eax@121
  int v84; // eax@123
  int v85; // esi@123
  const wchar_t *v86; // edx@131
  int v87; // ecx@131
  __int16 v88; // ax@131
  _DWORD *v89; // eax@135
  const wchar_t *v90; // edx@141
  int v91; // ecx@141
  __int16 v92; // ax@141
  _DWORD *v93; // eax@145
  signed int v94; // [sp-Ch] [bp-86Ch]@3
  char *v95; // [sp-8h] [bp-868h]@3
  IPCHandler *v96; // [sp-4h] [bp-864h]@16
  LPARAM v97; // [sp+0h] [bp-860h]@40
  char v98; // [sp+Ch] [bp-854h]@144
  int v99; // [sp+10h] [bp-850h]@144
  int v100; // [sp+14h] [bp-84Ch]@146
  LPARAM v101; // [sp+1Ch] [bp-844h]@1
  int v102; // [sp+20h] [bp-840h]@33
  int v103; // [sp+24h] [bp-83Ch]@33
  int v104; // [sp+28h] [bp-838h]@35
  int v105; // [sp+30h] [bp-830h]@33
  HWND v106; // [sp+34h] [bp-82Ch]@33
  unsigned __int8 v107; // [sp+3Bh] [bp-825h]@16
  char v108; // [sp+3Ch] [bp-824h]@35
  LPARAM lParam; // [sp+40h] [bp-820h]@9
  int v110; // [sp+44h] [bp-81Ch]@33
  HWND v111; // [sp+48h] [bp-818h]@3
  HWND hWnd; // [sp+4Ch] [bp-814h]@1
  __int16 v113[512]; // [sp+50h] [bp-810h]@143
  __int16 v114[518]; // [sp+450h] [bp-410h]@32
  int v115; // [sp+85Ch] [bp-4h]@3

  hWnd = a2;
  v101 = a5;
  if ( Msg == 2024 )
  {
    if ( wParam == (__int16 *)3 )
    {
      v101 = 0;
      v95 = (char *)&v101;
      v94 = (signed int)this;
      v111 = (HWND)&v94;
      v115 = 0;
      CTXStringW::CTXStringW(&v94, L"g_pwdEMkpicData");
      IPCHandler::GetShareInfo(v94, v95);
      v5 = (int *)v101;
      if ( !v101 )
        return 0;
      hWnd = 0;
      LOBYTE(v115) = 1;
      v7 = CTXStringW::GetBSTR((CTXStringW *)&unk_651CB068);
      v8 = *v5;
      v95 = (char *)&hWnd;
      v94 = (signed int)v7;
      (*(void (__stdcall **)(int *, wchar_t *, HWND *))(v8 + 68))(v5, v7, &hWnd);
      if ( hWnd )
      {
        lParam = 0;
        LOBYTE(v115) = 2;
        sub_65121702(&lParam);
        v95 = (char *)hWnd;
        v12 = *(_DWORD *)lParam;
        v94 = lParam;
        (*(void (__stdcall **)(LPARAM, HWND))(v12 + 32))(lParam, hWnd);
        LOBYTE(v115) = 1;
        if ( lParam )
        {
          v13 = *(_DWORD *)lParam;
          v95 = (char *)lParam;
          (*(void (__stdcall **)(LPARAM))(v13 + 8))(lParam);
        }
        LOBYTE(v115) = 0;
        if ( hWnd )
        {
          v14 = *(_DWORD *)hWnd;
          v95 = (char *)hWnd;
          (*(void (__stdcall **)(HWND))(v14 + 8))(hWnd);
        }
      }
      v9 = (char *)v101;
      v115 = -1;
      v10 = v101 == 0;
LABEL_7:
      if ( !v10 )
      {
        v11 = *(_DWORD *)v9;
        v95 = v9;
        (*(void (__stdcall **)(char *))(v11 + 8))(v9);
      }
      return 0;
    }
    if ( wParam == (__int16 *)2 )
    {
      if ( !sub_6512C926(this) )
      {
        v95 = (char *)v101;
        if ( dword_651CAB24 <= 0 )
        {
          sub_65109408(v95);
          v29 = (char *)lParam;
          v95 = (char *)lParam;
          v94 = v30;
          v111 = (HWND)&v94;
          v115 = 7;
          CTXStringW::CTXStringW(&v94, L"g_PwdGuardData");
          IPCHandler::SetShareInfo(v94, v95);
          IPCHandler::GetHwnd((IPCHandler *)1, (unsigned int)&hWnd);
          SendMessageW(hWnd, 0x7E8u, 2u, 0);
          v115 = -1;
          if ( !v29 )
            return 0;
          v28 = *(_DWORD *)v29;
          v95 = v29;
        }
        else
        {
          sub_65109408(v95);
          lParam = 0;
          v115 = 5;
          LOBYTE(v115) = 6;
          v107 = 0;
          v24 = hWnd;
          v25 = IPCHandler::GetIMHwnd(v96);
          if ( hWnd )
          {
            v26 = CTXStringW::GetBSTR((CTXStringW *)&unk_651CB054);
            (*(void (__stdcall **)(HWND, wchar_t *, LPARAM *))(*(_DWORD *)hWnd + 284))(hWnd, v26, &lParam);
            v27 = CTXStringW::GetBSTR((CTXStringW *)&unk_651CB058);
            (*(void (__stdcall **)(HWND, wchar_t *, char *))(*(_DWORD *)v24 + 32))(v24, v27, (char *)&v107);
            SendMessageW(v25, 0x7EDu, v107, lParam);
          }
          LOBYTE(v115) = 5;
          if ( lParam )
            (*(void (__stdcall **)(LPARAM))(*(_DWORD *)lParam + 8))(lParam);
          v115 = -1;
          if ( !v24 )
            return 0;
          v28 = *(_DWORD *)v24;
          v95 = (char *)v24;
        }
        (*(void (__stdcall **)(char *))(v28 + 8))(v95);
        return 0;
      }
      hWnd = 0;
      v95 = (char *)&hWnd;
      v94 = v15;
      v111 = (HWND)&v94;
      v115 = 3;
      CTXStringW::CTXStringW(&v94, L"g_PwdGuardData");
      IPCHandler::GetShareInfo(v94, v95);
      if ( !hWnd )
        goto LABEL_43;
      lParam = 0;
      LOBYTE(v115) = 4;
      v107 = 0;
      v16 = IPCHandler::GetIMHwnd(v96);
      v17 = hWnd;
      v18 = v16;
      v19 = CTXStringW::GetBSTR((CTXStringW *)&unk_651CB054);
      v20 = *(_DWORD *)v17;
      v95 = (char *)&lParam;
      v94 = (signed int)v19;
      (*(void (__stdcall **)(HWND, wchar_t *, LPARAM *))(v20 + 284))(v17, v19, &lParam);
      v21 = hWnd;
      v22 = CTXStringW::GetBSTR((CTXStringW *)&unk_651CB058);
      v23 = *(_DWORD *)v21;
      v95 = (char *)&v107;
      v94 = (signed int)v22;
      (*(void (__stdcall **)(HWND, wchar_t *, char *))(v23 + 32))(v21, v22, (char *)&v107);
      SendMessageW(v18, 0x7EDu, v107, lParam);
      LOBYTE(v115) = 3;
      goto LABEL_41;
    }
    if ( wParam == (__int16 *)4 )
    {
      if ( Util::MultiLogin::GetIfLoginProcess() )
        return 0;
      hWnd = 0;
      v95 = (char *)&hWnd;
      v94 = v31;
      v111 = (HWND)&v94;
      v115 = 8;
      CTXStringW::CTXStringW(&v94, L"g_PwdGuardErrorData");
      IPCHandler::GetShareInfo(v94, v95);
      if ( hWnd )
      {
        v32 = L"OnLoginProcessEvent(LoginProcessEvent::PwdGuard::OnServerVerifyFailed, pData)";
        v33 = 0;
        v34 = 79;
        do
        {
          if ( v34 == 40 )
            break;
          ++v32;
          v114[v33] = v34;
          v34 = *v32;
          ++v33;
        }
        while ( *v32 );
        v95 = (char *)v114;
        v94 = 0;
        v114[v33] = 0;
        sub_6512E424(&v102, v94, v95);
        LOBYTE(v115) = 9;
        sub_6512CC75(v103, &v102);
        v110 = v105;
        v111 = v106;
        while ( 1 )
        {
          sub_6512CC75(v104, &v102);
          if ( (unsigned __int8)sub_6512782E(&v108) )
            break;
          v35 = (int **)sub_6513AFD3(&v110);
          v95 = (char *)hWnd;
          v36 = *v35;
          v37 = *v36;
          v94 = 4;
          (*(void (__stdcall **)(int *, signed int, HWND))(v37 + 12))(v36, 4, hWnd);
          sub_6511149C(&v110);
        }
        sub_65112459((int)&v102);
      }
      v9 = (char *)hWnd;
      goto LABEL_53;
    }
    if ( wParam == (__int16 *)9 )
    {
      if ( !Util::MultiLogin::GetIfLoginProcess() )
        return 0;
      hWnd = 0;
      v115 = 10;
      sub_65121702(&hWnd);
      lParam = 0;
      v38 = v95;
      v95 = (char *)&lParam;
      v94 = (signed int)v38;
      v111 = (HWND)&v94;
      LOBYTE(v115) = 11;
      CTXStringW::CTXStringW(&v94, L"g_pwdGuardTypeChangeData");
      IPCHandler::GetShareInfo(v96, v97);
      v97 = lParam;
      v39 = *(_DWORD *)hWnd;
      v96 = (IPCHandler *)hWnd;
      (*(void (__cdecl **)(HWND, LPARAM))(v39 + 36))(hWnd, lParam);
      LOBYTE(v115) = 10;
LABEL_41:
      if ( lParam )
      {
        v40 = *(_DWORD *)lParam;
        v95 = (char *)lParam;
        (*(void (__stdcall **)(LPARAM))(v40 + 8))(lParam);
      }
LABEL_43:
      v9 = (char *)hWnd;
      v115 = -1;
      v10 = hWnd == 0;
      goto LABEL_7;
    }
    if ( wParam == (__int16 *)10 )
    {
      if ( Util::MultiLogin::GetIfLoginProcess() )
      {
        if ( sub_6512C926(v41) )
        {
          v42 = IPCHandler::GetIMHwnd(v96);
          SendMessageW(v42, 0x7EEu, 0, 0);
        }
      }
      else
      {
        IPCHandler::SendMessageTo((IPCHandler *)1, 0x7E8u, 0xAu, 0, (__int32)v96);
      }
      return 0;
    }
    if ( wParam == (__int16 *)8 )
    {
      lParam = 0;
      v115 = 12;
      sub_65121702(&lParam);
      (*(void (__stdcall **)(LPARAM))(*(_DWORD *)lParam + 52))(lParam);
      if ( sub_6512C926(v43) )
      {
        hWnd = 0;
        IPCHandler::GetHwnd(0, (unsigned int)&hWnd);
        PostMessageW(hWnd, 0x3C41u, 0, 0);
        PostQuitMessage(0);
      }
      v9 = (char *)lParam;
LABEL_53:
      v115 = -1;
      v10 = v9 == 0;
      goto LABEL_7;
    }
    if ( wParam != (__int16 *)1 )
      return 0;
    v44 = L"OnLoginPanelEvent(LoginPanelEvents::EventIDs::LoginPanel_InputPwdFrame, 0)";
    v45 = 0;
    v46 = 79;
    do
    {
      if ( v46 == 40 )
        break;
      ++v44;
      v114[v45] = v46;
      v46 = *v44;
      ++v45;
    }
    while ( *v44 );
    v95 = (char *)v114;
    v94 = 0;
    v114[v45] = 0;
    sub_6512E424(&v102, v94, v95);
    v115 = 13;
    sub_6512CC75(v103, &v102);
    v110 = v105;
    v111 = v106;
    while ( 1 )
    {
      sub_6512CC75(v104, &v102);
      if ( (unsigned __int8)sub_6512782E(&v108) )
        break;
      v47 = (_DWORD *)sub_6513AFD3(&v110);
      (*(void (__stdcall **)(_DWORD, signed int, _DWORD))(*(_DWORD *)*v47 + 16))(*v47, 4, 0);
      sub_6511149C(&v110);
    }
    goto LABEL_61;
  }
  if ( Msg != 2025 )
  {
    if ( Msg == 2026 )
    {
      if ( wParam == (__int16 *)2 )
      {
        v53 = L"OnLoginPanelEvent(LoginPanelEvents::EventIDs::Login_Cancel, 0)";
        v54 = 0;
        v55 = 79;
        do
        {
          if ( v55 == 40 )
            break;
          v114[v54++] = v55;
          ++v53;
          v55 = *v53;
        }
        while ( *v53 );
        v95 = (char *)v114;
        v94 = 0;
        v114[v54] = 0;
        sub_6512E424(&v102, v94, v95);
        v115 = 15;
        sub_6512CC75(v103, &v102);
        v110 = v105;
        v111 = v106;
        while ( 1 )
        {
          sub_6512CC75(v104, &v102);
          if ( (unsigned __int8)sub_6512782E(&v108) )
            break;
          v56 = (_DWORD *)sub_6513AFD3(&v110);
          (*(void (__stdcall **)(_DWORD, signed int, _DWORD))(*(_DWORD *)*v56 + 16))(*v56, 7, 0);
          sub_6511149C(&v110);
        }
        sub_65112459((int)&v102);
        v95 = 0;
        goto LABEL_66;
      }
      if ( wParam == (__int16 *)4 )
      {
LABEL_65:
        v95 = 0;
LABEL_66:
        PostQuitMessage((int)v95);
        return 1;
      }
    }
    else if ( Msg == 2124 )
    {
      v57 = dword_651CAB20;
      sub_6510BB10(dword_651CAB20);
      v115 = 16;
      if ( lParam )
        (*(void (__stdcall **)(LPARAM, _DWORD))(*(_DWORD *)lParam + 1220))(lParam, 0);
      v95 = (char *)v57;
      v58 = sub_65103462(L"LoginPanel_IM_Fail");
      v111 = (HWND)&v94;
      CTXStringW::CTXStringW(&v94, v58);
      sub_6512CF59(v94, v95);
      v115 = -1;
      if ( lParam )
      {
        v59 = *(_DWORD *)lParam;
        v95 = (char *)lParam;
        (*(void (__stdcall **)(LPARAM))(v59 + 8))(lParam);
      }
    }
    else
    {
      if ( Msg != 2125 )
      {
        if ( Msg == 2027 )
        {
          hWnd = 0;
          v115 = 18;
          Util::Data::CreateTXData((Util::Data *)&hWnd, (struct ITXData **)v96);
          v64 = hWnd;
          if ( hWnd )
          {
            lParam = (LPARAM)hWnd;
            v65 = CTXBSTR::CTXBSTR(&v111, L"pcFrame");
            v66 = *(_DWORD *)v64;
            v95 = (char *)wParam;
            LOBYTE(v115) = 19;
            v67 = CTXBSTR::operator wchar_t *(v65);
            (*(void (__stdcall **)(LPARAM, int))(v66 + 224))(lParam, v67);
            LOBYTE(v115) = 18;
            CTXBSTR::~CTXBSTR((CTXBSTR *)&v111);
            v68 = hWnd;
            v111 = hWnd;
            v69 = CTXBSTR::CTXBSTR(&lParam, L"nFrameLen");
            v70 = *(_DWORD *)v68;
            v95 = (char *)v101;
            LOBYTE(v115) = 20;
            v71 = CTXBSTR::operator wchar_t *(v69);
            (*(void (__stdcall **)(HWND, int))(v70 + 224))(v111, v71);
            LOBYTE(v115) = 18;
            CTXBSTR::~CTXBSTR((CTXBSTR *)&lParam);
          }
          v72 = L"OnFaceLoginEventEvent(FaceLoginEvents::UpdateView, pData)";
          v73 = 0;
          v74 = 79;
          do
          {
            if ( v74 == 40 )
              break;
            v114[v73++] = v74;
            ++v72;
            v74 = *v72;
          }
          while ( *v72 );
          v114[v73] = 0;
          sub_65140A92(&v102, 0, v114);
          LOBYTE(v115) = 21;
          sub_6512CC75(v103, &v102);
          v110 = v105;
          v111 = v106;
          while ( 1 )
          {
            sub_6512CC75(v104, &v102);
            if ( (unsigned __int8)sub_6512782E(&v108) )
              break;
            v75 = (_DWORD *)sub_6513AFD3(&v110);
            (*(void (__stdcall **)(_DWORD, signed int, HWND))(*(_DWORD *)*v75 + 12))(*v75, 2, hWnd);
            sub_6511149C(&v110);
          }
          sub_65112459((int)&v102);
          goto LABEL_43;
        }
        if ( Msg == 2127 )
        {
          lParam = 0;
          v115 = 22;
          Util::Data::CreateTXData((Util::Data *)&lParam, (struct ITXData **)v96);
          v76 = (int *)lParam;
          if ( lParam )
          {
            v77 = CTXBSTR::CTXBSTR(&v111, L"dwRet");
            v78 = *v76;
            v96 = (IPCHandler *)wParam;
            LOBYTE(v115) = 23;
            v79 = CTXBSTR::operator wchar_t *(v77);
            (*(void (__stdcall **)(int *, int))(v78 + 224))(v76, v79);
            LOBYTE(v115) = 22;
            CTXBSTR::~CTXBSTR((CTXBSTR *)&v111);
          }
          v80 = L"OnFaceLoginEventEvent(FaceLoginEvents::CheckAccountResult, pData)";
          v81 = 0;
          v82 = 79;
          do
          {
            if ( v82 == 40 )
              break;
            v114[v81++] = v82;
            ++v80;
            v82 = *v80;
          }
          while ( *v80 );
          v114[v81] = 0;
          sub_65140A92(&v102, 0, v114);
          LOBYTE(v115) = 24;
          sub_6512CC75(v103, &v102);
          v110 = v105;
          v111 = v106;
          while ( 1 )
          {
            sub_6512CC75(v104, &v102);
            if ( (unsigned __int8)sub_6512782E(&v105) )
              break;
            v83 = (_DWORD *)sub_6513AFD3(&v110);
            (*(void (__stdcall **)(_DWORD, signed int, LPARAM))(*(_DWORD *)*v83 + 12))(*v83, 3, lParam);
            sub_6511149C(&v110);
          }
          LOBYTE(v115) = 22;
          sub_65112459((int)&v102);
          v96 = (IPCHandler *)v101;
          v84 = ((int (__stdcall *)(HWND, signed int, __int16 *))dwNewLong)(hWnd, 2127, wParam);
          v115 = -1;
          v85 = v84;
          if ( lParam )
            (*(void (__stdcall **)(LPARAM))(*(_DWORD *)lParam + 8))(lParam);
          return v85;
        }
        if ( Msg == 18 )
          goto LABEL_65;
        if ( Msg == 74 )
          return sub_6513F901(hWnd, 0x4Au, (WPARAM)wParam, a5);
        if ( Msg == 2225 )
        {
          v86 = L"OnLoginPanelEvent(LoginPanelEvents::EventIDs::LoginPanel_LoadFlash, 0)";
          v87 = 0;
          v88 = 79;
          do
          {
            if ( v88 == 40 )
              break;
            v114[v87++] = v88;
            ++v86;
            v88 = *v86;
          }
          while ( *v86 );
          v95 = (char *)v114;
          v94 = 0;
          v114[v87] = 0;
          sub_6512E424(&v102, v94, v95);
          v115 = 25;
          sub_6512CC75(v103, &v102);
          v110 = v105;
          v111 = v106;
          while ( 1 )
          {
            sub_6512CC75(v104, &v102);
            if ( (unsigned __int8)sub_6512782E(&v105) )
              break;
            v89 = (_DWORD *)sub_6513AFD3(&v110);
            (*(void (__stdcall **)(_DWORD, signed int, _DWORD))(*(_DWORD *)*v89 + 16))(*v89, 9, 0);
            sub_6511149C(&v110);
          }
LABEL_61:
          v48 = &v102;
LABEL_62:
          sub_65112459((int)v48);
          return 0;
        }
        if ( Msg == 2234 )
          return sub_65140BD1(hWnd, 2234, wParam, v101);
        if ( Msg == 2236 )
        {
          v90 = L"OnLoginPanelEvent(LoginPanelEvents::EventIDs::Login_StartLogin, 0)";
          v91 = 0;
          v92 = 79;
          do
          {
            if ( v92 == 40 )
              break;
            v113[v91++] = v92;
            ++v90;
            v92 = *v90;
          }
          while ( *v90 );
          v95 = (char *)v113;
          v94 = 0;
          v113[v91] = 0;
          sub_6512E424(&v98, v94, v95);
          v115 = 26;
          sub_6512CC75(v99, &v98);
          v110 = v105;
          v111 = v106;
          while ( 1 )
          {
            sub_6512CC75(v100, &v98);
            if ( (unsigned __int8)sub_6512782E(&v105) )
              break;
            v93 = (_DWORD *)sub_6513AFD3(&v110);
            (*(void (__stdcall **)(_DWORD, signed int, _DWORD))(*(_DWORD *)*v93 + 16))(*v93, 11, 0);
            sub_6511149C(&v110);
          }
          v48 = (int *)&v98;
          goto LABEL_62;
        }
        v95 = (char *)v101;
        v94 = (signed int)wParam;
        if ( dwNewLong )
          return ((int (__thiscall *)(HWND *, HWND, UINT, signed int, char *))dwNewLong)(this, hWnd, Msg, v94, v95);  //sub_30801A10
        return DefWindowProcW(hWnd, Msg, v94, (LPARAM)v95);
      }
      if ( wParam == (__int16 *)1 )
      {
        v60 = L"OnLoginProcessEvent(LoginProcessEvent::PwdGuard::OnServerVerifyCode, 0)";
        v61 = 0;
        v62 = 79;
        do
        {
          if ( v62 == 40 )
            break;
          v114[v61++] = v62;
          ++v60;
          v62 = *v60;
        }
        while ( *v60 );
        v95 = (char *)v114;
        v94 = 0;
        v114[v61] = 0;
        sub_6512E424(&v102, v94, v95);
        v115 = 17;
        sub_6512CC75(v103, &v102);
        v110 = v105;
        v111 = v106;
        while ( 1 )
        {
          sub_6512CC75(v104, &v102);
          if ( (unsigned __int8)sub_6512782E(&v108) )
            break;
          v63 = (_DWORD *)sub_6513AFD3(&v110);
          (*(void (__stdcall **)(_DWORD, signed int, _DWORD))(*(_DWORD *)*v63 + 12))(*v63, 1, 0);
          sub_6511149C(&v110);
        }
        sub_65112459((int)&v102);
      }
    }
    v95 = (char *)v101;
    v94 = (signed int)wParam;
    return DefWindowProcW(hWnd, Msg, v94, (LPARAM)v95);
  }
  if ( wParam == (__int16 *)1 )
    goto LABEL_65;
  if ( wParam == (__int16 *)2 )
  {
    v49 = L"OnLoginPanelEvent(LoginPanelEvents::EventIDs::LoginChild_Failed, 0)";
    v50 = 0;
    v51 = 79;
    do
    {
      if ( v51 == 40 )
        break;
      v114[v50++] = v51;
      ++v49;
      v51 = *v49;
    }
    while ( *v49 );
    v95 = (char *)v114;
    v94 = 0;
    v114[v50] = 0;
    sub_6512E424(&v102, v94, v95);
    v115 = 14;
    sub_6512CC75(v103, &v102);
    v110 = v105;
    v111 = v106;
    while ( 1 )
    {
      sub_6512CC75(v104, &v102);
      if ( (unsigned __int8)sub_6512782E(&v108) )
        break;
      v52 = (_DWORD *)sub_6513AFD3(&v110);
      (*(void (__stdcall **)(_DWORD, signed int, _DWORD))(*(_DWORD *)*v52 + 16))(*v52, 6, 0);
      sub_6511149C(&v110);
    }
    v115 = -1;
    sub_65112459((int)&v102);
  }
  return ((int (__thiscall *)(HWND *, HWND, signed int, __int16 *, LPARAM))dwNewLong)(this, hWnd, 2025, wParam, v101);
}


//设置  winproc 为  dwNewLong 
int __thiscall sub_6513FA5D(char *this)
{
  char *v1; // edi@1
  int v2; // esi@1
  int v3; // edi@1

  v1 = this;
  SetWindowLongW(hWnd, -4, dwNewLong);
  v2 = (int)(v1 + 4);
  sub_65150E6A(*((_DWORD *)v1 + 1));
  sub_6510CD11(&unk_6519AAF4, *((_DWORD *)v1 + 1));
  v3 = *((_DWORD *)v1 + 2);
  if ( v3 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v3 + 8))(v3);
  return sub_6513A4ED(v2);
}


//设置  dwNewLong 赋值  
_DWORD *__thiscall sub_65141C2E(_DWORD *this)
{
  _DWORD *v1; // esi@1
  _DWORD *v2; // ST18_4@1
  int v4; // [sp-4h] [bp-20h]@0
  int v5; // [sp+0h] [bp-1Ch]@0
  int v6; // [sp+4h] [bp-18h]@0
  int v7; // [sp+8h] [bp-14h]@0
  int v8; // [sp+10h] [bp-Ch]@0
  int v9; // [sp+14h] [bp-8h]@0
  int savedregs; // [sp+1Ch] [bp+0h]@0

  v1 = this;
  v2 = this;
  sub_651407B5(this);
  v1[2] = 0;
  (*(void (__stdcall **)(int, HWND *, int, int, int, int, _DWORD *, int, int, signed int, int))(*(_DWORD *)dword_651CAB20
                                                                                              + 512))(
    dword_651CAB20,
    &hWnd,
    v4,
    v5,
    v6,
    v7,
    v2,
    v8,
    v9,
    1,
    savedregs);
  dwNewLong = SetWindowLongW(hWnd, -4, (LONG)sub_65140CBD);  // 如果函数成功，返回值是指定的32位整数的原来的值。如果函数失败，返回值为0。若想获得更多错误信息，请调用GetLastError函数
  *(_DWORD *)(v1[1] + 40) = sub_65140769;
  sub_6510CCB7(&unk_6519AAF4, &unk_651B39A4, 0, v1[1]);
  return v1;
}
==============================================================================================================================================================================================
0012EE1C  |7C930202  返回到 ntdll.7C930202 来自 ntdll.7C92E8E6
==============================================================================================================================================================================================
0012EE20  |7C93017B  返回到 ntdll.7C93017B 来自 ntdll.7C9301D1
==============================================================================================================================================================================================
0012EE24  |7C9301BB  返回到 ntdll.7C9301BB 来自 ntdll.7C92E8E6
==============================================================================================================================================================================================
0012EF8C  |7C930098  返回到 ntdll.7C930098 来自 ntdll.7C922AB0
==============================================================================================================================================================================================
0012EF98  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
==============================================================================================================================================================================================
0012EFA0  |7C93003D  返回到 ntdll.7C93003D
==============================================================================================================================================================================================
0012F000  |7C930098  返回到 ntdll.7C930098 来自 ntdll.7C922AB0
==============================================================================================================================================================================================
0012F00C  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
==============================================================================================================================================================================================
0012F014  |7C93003D  返回到 ntdll.7C93003D
==============================================================================================================================================================================================
0012F048  |7C9301BB  返回到 ntdll.7C9301BB 来自 ntdll.7C92E8E6
==============================================================================================================================================================================================
0012F04C  |018B634D  返回到 QQPinyin.018B634D 来自 ntdll.RtlAllocateHeap
==============================================================================================================================================================================================
0012F06C  |018B53D4  返回到 QQPinyin.018B53D4 来自 QQPinyin.018B6304
==============================================================================================================================================================================================
0012F088  |018BB65A  返回到 QQPinyin.018BB65A 来自 QQPinyin.018B53B7
==============================================================================================================================================================================================
0012F08C  |018BB66F  返回到 QQPinyin.018BB66F 来自 QQPinyin.018D0280
==============================================================================================================================================================================================
0012F0A4  |01660426  返回到 QQPinyin.01660426 来自 QQPinyin.018B4808
==============================================================================================================================================================================================
0012F0D4  |7C93003D  返回到 ntdll.7C93003D
==============================================================================================================================================================================================
0012F0D8  |018B56CE  返回到 QQPinyin.018B56CE 来自 ntdll.RtlFreeHeap
==============================================================================================================================================================================================
0012F0EC  |0165A43E  返回到 QQPinyin.0165A43E 来自 QQPinyin.018B5B0F
==============================================================================================================================================================================================
0012F10C  |7C92DA1C  返回到 ntdll.7C92DA1C
==============================================================================================================================================================================================
0012F110  |7C80C061  返回到 kernel32.7C80C061 来自 ntdll.ZwReleaseSemaphore
==============================================================================================================================================================================================
0012F124  |018D3BC3  返回到 QQPinyin.018D3BC3 来自 QQPinyin.018B4808
==============================================================================================================================================================================================
0012F13C  |018C17AC  返回到 QQPinyin.018C17AC 来自 QQPinyin.018D3A40
==============================================================================================================================================================================================
0012F14C  |018C1C58  返回到 QQPinyin.018C1C58 来自 QQPinyin.018C1791
==============================================================================================================================================================================================
0012F164  |018C2454  返回到 QQPinyin.018C2454 来自 QQPinyin.018B4808
==============================================================================================================================================================================================
0012F228  |0012F23C  返回到 0012F23C
==============================================================================================================================================================================================
0012F22C  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
==============================================================================================================================================================================================
0012F244  |3084AC58  返回到 GF.3084AC58 来自 GF.3084AB6C
==============================================================================================================================================================================================
0012F258  |3084AC58  返回到 GF.3084AC58 来自 GF.3084AB6C
==============================================================================================================================================================================================
0012F274  |3084AC58  返回到 GF.3084AC58 来自 GF.3084AB6C
==============================================================================================================================================================================================
0012F288  |30819833  返回到 GF.30819833 来自 GF.3084AC47
==============================================================================================================================================================================================
0012F29C  |308F7EA8  返回到 GF.308F7EA8 来自 GF.309142AD
==============================================================================================================================================================================================
0012F2A4  |77D29CBA  返回到 user32.SetRectEmpty
==============================================================================================================================================================================================
0012F2B4  |77D29CBA  返回到 user32.SetRectEmpty
==============================================================================================================================================================================================
0012F2BC  |308F8438  返回到 GF.308F8438 来自 user32.UnionRect
==============================================================================================================================================================================================
0012F2C4  |308F84E9  返回到 GF.308F84E9 来自 ntdll.RtlLeaveCriticalSection
==============================================================================================================================================================================================
0012F314  |308F8518  返回到 GF.308F8518 来自 GF.308F8370
==============================================================================================================================================================================================
0012F328  |308F4692  返回到 GF.308F4692 来自 user32.InvalidateRect
int __thiscall sub_308F45F5(void *this, RECT *lpRect)
{
  void *v2; // esi@1
  int v3; // eax@1
  int result; // eax@2
  int v5; // eax@3
  int v6; // ebx@4
  struct tagRECT rc; // [sp+8h] [bp-18h]@7
  int v8; // [sp+18h] [bp-8h]@3
  HWND hWnd; // [sp+1Ch] [bp-4h]@1

  v2 = this;
  v3 = *(_DWORD *)this;
  hWnd = 0;
  (*(void (__stdcall **)(HWND *))(v3 + 380))(&hWnd);
  if ( hWnd && (v5 = *(_DWORD *)v2, v8 = 0, (*(void (__thiscall **)(void *, int *))(v5 + 376))(v2, &v8), v8) )
  {
    v6 = (*(int (__thiscall **)(void *))(*(_DWORD *)v2 + 88))(v2);
    if ( !v6 && !(unsigned __int8)sub_30834E44(v2)
      || (lpRect ? sub_30834EAE(lpRect) : ((*(void (__thiscall **)(void *, struct tagRECT *))(*(_DWORD *)v2 + 92))(
                                             v2,
                                             &rc),
                                           OffsetRect(&rc, -rc.left, -rc.top),
                                           sub_30834EAE(&rc)),
          !v6) )
    {
      InvalidateRect(hWnd, lpRect, 0);
    }
    result = 0;
  }
  else
  {
    result = 1;
  }
  return result;
}

==============================================================================================================================================================================================
0012F350  |6510A368  返回到 LoginPan.6510A368 来自 kernel32.InterlockedDecrement
==============================================================================================================================================================================================
0012F360  |3090E4BA  返回到 GF.3090E4BA
int __stdcall sub_3090E4A6(int a1, int a2)
{
  return (*(int (__stdcall **)(int))(*(_DWORD *)(a1 + 8) + 500))(a2);
}
==============================================================================================================================================================================================
0012F36C  |6510A368  返回到 LoginPan.6510A368 来自 kernel32.InterlockedDecrement
==============================================================================================================================================================================================
0012F380  |30835C01  返回到 GF.30835C01
.text:30835BFE                 call    dword ptr [eax+8]
char __stdcall sub_30835BB9(int a1)
{
  char result; // al@2
  int v2; // esi@3
  int v3; // [sp+Ch] [bp-10h]@3
  int v4; // [sp+18h] [bp-4h]@3

  if ( a1 )
  {
    v3 = 0;
    v4 = 0;
    sub_30834C1C(&v3);
    v2 = v3;
    if ( v3 )
      (*(void (__stdcall **)(int, int))(*(_DWORD *)v3 + 152))(v3, a1);
    v4 = -1;
    if ( v2 )
      (*(void (__stdcall **)(int))(*(_DWORD *)v2 + 8))(v2);
    result = 1;
  }
  else
  {
    result = 0;
  }
  return result;
}
==============================================================================================================================================================================================
0012F384  |30835C08  返回到 GF.30835C08 来自 GF.30949737
==============================================================================================================================================================================================
0012F3A8  |30835C08  返回到 GF.30835C08 来自 GF.30949737
==============================================================================================================================================================================================
0012F3AC  |308365B7  返回到 GF.308365B7 来自 GF.30835BB9
.text:308365B2                 call    sub_30835BB9

int __thiscall sub_30836486(void *this, RECT *lprcSrc)
{
  void *v2; // ebx@1
  int v3; // eax@1
  int v5; // eax@3
  struct tagRECT rc; // [sp+Ch] [bp-3Ch]@7
  struct tagRECT rcDst; // [sp+1Ch] [bp-2Ch]@4
  RECT rcSrc2; // [sp+2Ch] [bp-1Ch]@4
  int v9; // [sp+3Ch] [bp-Ch]@4
  int v10; // [sp+40h] [bp-8h]@3
  int v11; // [sp+44h] [bp-4h]@1

  v2 = this;
  v3 = *(_DWORD *)this;
  v11 = 0;
  (*(void (__stdcall **)(int *))(v3 + 380))(&v11);
  if ( !v11 )
    return 1;
  v5 = *(_DWORD *)v2;
  v10 = 0;
  (*(void (__thiscall **)(void *, int *))(v5 + 376))(v2, &v10);
  if ( !v10 )
    return 1;
  v9 = (*(int (__thiscall **)(void *))(*(_DWORD *)v2 + 88))(v2);
  (*(void (__thiscall **)(void *, RECT *))(*(_DWORD *)v2 + 92))(v2, &rcSrc2);
  CopyRect(&rcDst, lprcSrc);
  if ( *((_DWORD *)v2 + 69) || v9 )
  {
    if ( !lprcSrc )
    {
      rc = rcSrc2;
      OffsetRect(&rc, -rcSrc2.left, -rcSrc2.top);
      sub_30834EAE(&rc);
      goto LABEL_10;
    }
    sub_30834EAE(lprcSrc);
  }
  if ( lprcSrc )
  {
    if ( !(unsigned __int8)sub_30834E44(v2) )
    {
      OffsetRect(&rcDst, rcSrc2.left, rcSrc2.top);
      IntersectRect(&rcDst, &rcDst, &rcSrc2);
      goto LABEL_17;
    }
    sub_30835B3F(lprcSrc->left, lprcSrc->top, lprcSrc->right, lprcSrc->bottom, &rc);
    goto LABEL_15;
  }
LABEL_10:
  if ( (unsigned __int8)sub_30834E44(v2) )
  {
    sub_30834E70(&rc);
LABEL_15:
    CopyRect(&rcDst, &rc);
    goto LABEL_17;
  }
  rcDst = rcSrc2;
LABEL_17:
  if ( !v9 )
    sub_30835BB9((int)&rcDst);
  return 0;
}
==============================================================================================================================================================================================
0012F3C0  |6510A368  返回到 LoginPan.6510A368 来自 kernel32.InterlockedDecrement
==============================================================================================================================================================================================
0012F3FC  |3083BA8B  返回到 GF.3083BA8B 来自 kernel32.InterlockedDecrement
LONG __stdcall sub_3083BA76(int a1)
{
  LONG v1; // edi@1

  v1 = InterlockedDecrement((volatile LONG *)(a1 + 400));
  if ( !v1 && a1 )
    (*(void (__thiscall **)(int, signed int))(*(_DWORD *)a1 + 688))(a1, 1);
  return v1;
}
==============================================================================================================================================================================================
0012F40C  |7C930202  返回到 ntdll.7C930202 来自 ntdll.7C92E8E6
==============================================================================================================================================================================================
0012F438  |7C930202  返回到 ntdll.7C930202 来自 ntdll.7C92E8E6
==============================================================================================================================================================================================
0012F43C  |7C93017B  返回到 ntdll.7C93017B 来自 ntdll.7C9301D1
==============================================================================================================================================================================================
0012F440  |7C9301BB  返回到 ntdll.7C9301BB 来自 ntdll.7C92E8E6
==============================================================================================================================================================================================
0012F44C  |300DE78C  返回到 Common.300DE78C 来自 Common.301317BF
==============================================================================================================================================================================================
0012F458  |300DE476  返回到 Common.300DE476
==============================================================================================================================================================================================
0012F46C  |300D9040  返回到 Common.300D9040 来自 <jmp.&MSVCR80.memset>
==============================================================================================================================================================================================
0012F47C  |300DB2BB  返回到 Common.300DB2BB 来自 <jmp.&MSVCR80.memcpy>
==============================================================================================================================================================================================
0012F490  |300DB1C1  返回到 Common.300DB1C1 来自 kernel32.InterlockedDecrement
==============================================================================================================================================================================================
0012F49C  |300DB3E3  返回到 Common.300DB3E3 来自 Common.300DB1B4
==============================================================================================================================================================================================
0012F4BC  |300DB2BB  返回到 Common.300DB2BB 来自 <jmp.&MSVCR80.memcpy>
==============================================================================================================================================================================================
0012F4D8  |300DB898  返回到 Common.300DB898 来自 Common.300DB2F9
==============================================================================================================================================================================================
0012F4DC  |300DE4CC  返回到 Common.300DE4CC
==============================================================================================================================================================================================
0012F4F4  |300DE679  返回到 Common.300DE679
==============================================================================================================================================================================================
0012F504  |300D9063  返回到 Common.300D9063 来自 Common.300DE654
==============================================================================================================================================================================================
0012F510  |300DB18E  返回到 Common.300DB18E 来自 Common.300D9048
==============================================================================================================================================================================================
0012F51C  |300DB1D2  返回到 Common.300DB1D2
==============================================================================================================================================================================================
0012F528  |300DBC60  返回到 Common.300DBC60 来自 Common.301317BF
==============================================================================================================================================================================================
0012F54C  |69F0CC62  返回到 HummerEn.69F0CC62 来自 HummerEn.69F0CB56
==============================================================================================================================================================================================
0012F550  |69F07E63  返回到 HummerEn.69F07E63 来自 HummerEn.69F0CC58
==============================================================================================================================================================================================
0012F658  |6515C84A  返回到 LoginPan.6515C84A
==============================================================================================================================================================================================
0012F6B0  |6510AF6C  返回到 LoginPan.6510AF6C 来自 LoginPan.6516E22B
==============================================================================================================================================================================================
0012F6D4  |6515C8DD  返回到 LoginPan.6515C8DD 来自 LoginPan.6515C47E
==============================================================================================================================================================================================
0012F6EC  |77D18734  返回到 user32.77D18734
==============================================================================================================================================================================================
0012F718  |77D18816  返回到 user32.77D18816 来自 user32.77D1870C
==============================================================================================================================================================================================
0012F780  |77D189CD  返回到 user32.77D189CD 来自 user32.77D1875F
==============================================================================================================================================================================================
0012F7B8  |69F060DC  返回到 HummerEn.69F060DC 来自 HummerEn.69F04FFB
==============================================================================================================================================================================================
0012F7E0  |77D18A10  返回到 user32.77D18A10 来自 user32.77D188F1
==============================================================================================================================================================================================
0012F7F0  |69F0652A  返回到 HummerEn.69F0652A 来自 user32.DispatchMessageW
==============================================================================================================================================================================================
0012F7FC  |69F0633C  返回到 HummerEn.69F0633C 来自 HummerEn.69F064C3
==============================================================================================================================================================================================
0012F82C  |69F06059  返回到 HummerEn.69F06059
==============================================================================================================================================================================================
0012F848  |69F04529  返回到 HummerEn.69F04529
==============================================================================================================================================================================================
0012F850  |69F04BFA  返回到 HummerEn.69F04BFA 来自 HummerEn.69F04513
==============================================================================================================================================================================================
0012F884  |69F0AF44  返回到 HummerEn.69F0AF44 来自 HummerEn.69F04BD9
==============================================================================================================================================================================================
0012F950  |7C935BD8  返回到 ntdll.7C935BD8 来自 ntdll.RtlFreeUnicodeString
==============================================================================================================================================================================================
0012F960  |7C935C3D  返回到 ntdll.7C935C3D 来自 ntdll.7C92FE57
==============================================================================================================================================================================================
0012F994  |78147344  返回到 msvcr80.78147344 来自 msvcr80.781472B7
==============================================================================================================================================================================================
0012F9A8  |7C9396BF  返回到 ntdll.7C9396BF 来自 ntdll.wcsncpy
==============================================================================================================================================================================================
0012F9CC  |7C80AF25  返回到 kernel32.7C80AF25 来自 ntdll.RtlGetVersion
==============================================================================================================================================================================================
0012F9E0  |300E7FCD  返回到 Common.300E7FCD 来自 kernel32.GetVersionExW
==============================================================================================================================================================================================
0012F9E4  |300E7FE1  返回到 Common.300E7FE1 来自 Common.301316D8
==============================================================================================================================================================================================
0012FA48  |7C930202  返回到 ntdll.7C930202 来自 ntdll.7C92E8E6
==============================================================================================================================================================================================
0012FAC8  |7C931066  返回到 ntdll.7C931066 来自 ntdll.RtlLeaveCriticalSection
==============================================================================================================================================================================================
0012FD94  |69F0B146  返回到 HummerEn.69F0B146 来自 HummerEn.69F0A4A4
==============================================================================================================================================================================================
0012FD98  |69F10EF4  返回到 HummerEn.69F10EF4
==============================================================================================================================================================================================
0012FDE0  |004014D9  返回到 QQ.004014D9
==============================================================================================================================================================================================
0012FF24  |0040128B  返回到 QQ.0040128B 来自 QQ.0040128F
==============================================================================================================================================================================================
0012FF30  |00401A8F  返回到 QQ.00401A8F 来自 QQ.00401280
==============================================================================================================================================================================================
0012FF98  |00402017  返回到 QQ.00402017 来自 kernel32.QueryPerformanceCounter
==============================================================================================================================================================================================
0012FFC4   7C817077  返回到 kernel32.7C817077
==============================================================================================================================================================================================
0012FFE8   7C817080  返回到 kernel32.7C817080











=====================================



0012DA8C   651445AF  /CALL 到 CreateProcessW 来自 LoginPan.651445A9
0012DA90   0222FD14  |ModuleFileName = "C:\Program Files\Tencent\QQIntl\Bin\QQ.exe"
0012DA94   01FA28F0  |CommandLine = "/MLogin:EE4C3694-CAF5-420C-8938-9E2ADCD677FA_0_0__PreProcess0000000000000000000000000000000000000000000000000 C:\Program Files\Tencent\QQIntl\Bin\QQ.exe "
0012DA98   00000000  |pProcessSecurity = NULL
0012DA9C   00000000  |pThreadSecurity = NULL
0012DAA0   00000000  |InheritHandles = FALSE
0012DAA4   00000000  |CreationFlags = 0
0012DAA8   00000000  |pEnvironment = NULL
0012DAAC   00000000  |CurrentDir = NULL
0012DAB0   0012DAC8  |pStartupInfo = 0012DAC8
0012DAB4   0012DB0C  \pProcessInfo = 0012DB0C
0012DAB8   A118A562
0012DABC   300DBCAC  Common.CTXStringW::CTXStringW
0012DAC0   651CB3E4  LoginPan.651CB3E4
0012DAC4   00000000
0012DAC8   00000044
0012DACC   00000000
0012DAD0   00000000
0012DAD4   00000000
0012DAD8   00000000
0012DADC   00000000
0012DAE0   00000000
0012DAE4   00000000
0012DAE8   00000000
0012DAEC   00000000
0012DAF0   00000000
0012DAF4   00000000
0012DAF8   00000000
0012DAFC   00000000
0012DB00   00000000
0012DB04   00000000
0012DB08   00000000
0012DB0C   00000000
0012DB10   00000000
0012DB14   00000000
0012DB18   00000000
0012DB1C   0222FD14  UNICODE "C:\Program Files\Tencent\QQIntl\Bin\QQ.exe"
0012DB20   022300CC  UNICODE "C:\Program Files\Tencent\QQIntl\Bin"
0012DB24   01F61900
0012DB28   0222FD14  UNICODE "C:\Program Files\Tencent\QQIntl\Bin\QQ.exe"
0012DB2C   003A0043
0012DB30   0050005C
0012DB34   006F0072
0012DB38   00720067
0012DB3C   006D0061
0012DB40   00460020
0012DB44   006C0069
0012DB48   00730065
0012DB4C   0054005C
0012DB50   006E0065
0012DB54   00650063  UNICODE "w"
0012DB58   0074006E
0012DB5C   0051005C
0012DB60   00490051
0012DB64   0074006E
0012DB68   005C006C
0012DB6C   00690042
0012DB70   005C006E
0012DB74   00510051
0012DB78   0065002E
0012DB7C   00650078
0012DB80   00000000
0012DB84   00000000
0012DB88   00000000
0012DB8C   00000000
0012DB90   00000000
0012DB94   00000000
0012DB98   00000000
0012DB9C   00000000
0012DBA0   00000000
0012DBA4   00000000
0012DBA8   00000000
0012DBAC   00000000
0012DBB0   00000000
0012DBB4   00000000
0012DBB8   00000000
0012DBBC   00000000
0012DBC0   00000000
0012DBC4   00000000
0012DBC8   00000000
0012DBCC   00000000
0012DBD0   00000000
0012DBD4   00000000
0012DBD8   00000000
0012DBDC   00000000
0012DBE0   00000000
0012DBE4   00000000
0012DBE8   00000000
0012DBEC   00000000
0012DBF0   00000000
0012DBF4   00000000
0012DBF8   00000000
0012DBFC   00000000
0012DC00   00000000
0012DC04   00000000
0012DC08   00000000
0012DC0C   00000000
0012DC10   00000000
0012DC14   00000000
0012DC18   00000000
0012DC1C   00000000
0012DC20   00000000
0012DC24   00000000
0012DC28   00000000
0012DC2C   00000000
0012DC30   00000000
0012DC34   00000000
0012DC38   00000000
0012DC3C   00000000
0012DC40   00000000
0012DC44   00000000
0012DC48   00000000
0012DC4C   00000000
0012DC50   00000000
0012DC54   00000000
0012DC58   00000000
0012DC5C   00000000
0012DC60   00000000
0012DC64   00000000
0012DC68   00000000
0012DC6C   00000000
0012DC70   00000000
0012DC74   00000000
0012DC78   00000000
0012DC7C   00000000
0012DC80   00000000
0012DC84   00000000
0012DC88   00000000
0012DC8C   00000000
0012DC90   00000000
0012DC94   00000000
0012DC98   00000000
0012DC9C   00000000
0012DCA0   00000000
0012DCA4   00000000
0012DCA8   00000000
0012DCAC   00000000
0012DCB0   00000000
0012DCB4   00000000
0012DCB8   00000000
0012DCBC   00000000
0012DCC0   00000000
0012DCC4   00000000
0012DCC8   00000000
0012DCCC   00000000
0012DCD0   00000000
0012DCD4   00000000
0012DCD8   00000000
0012DCDC   00000000
0012DCE0   00000000
0012DCE4   00000000
0012DCE8   00000000
0012DCEC   00000000
0012DCF0   00000000
0012DCF4   00000000
0012DCF8   00000000
0012DCFC   00000000
0012DD00   00000000
0012DD04   00000000
0012DD08   00000000
0012DD0C   00000000
0012DD10   00000000
0012DD14   00000000
0012DD18   00000000
0012DD1C   00000000
0012DD20   00000000
0012DD24   00000000
0012DD28   00000000
0012DD2C   00000000
0012DD30   00000000
0012DD34   A118A562
0012DD38   0012DD74  指向下一个 SEH 记录的指针
0012DD3C   6517623A  SE处理程序
0012DD40   00000001
0012DD44  /0012DD80
0012DD48  |651452E8  返回到 LoginPan.651452E8 来自 LoginPan.6514447D
0012DD4C  |01FA28F0  UNICODE "/MLogin:EE4C3694-CAF5-420C-8938-9E2ADCD677FA_0_0__"
0012DD50  |A118A5A6
0012DD54  |01EDBAD0
0012DD58  |651CB3E4  LoginPan.651CB3E4
0012DD5C  |300DA016  Common.CTXStringW::CTXStringW
0012DD60  |300DB4FB  返回到 Common.300DB4FB 来自 Common.300DB3F2
0012DD64  |01FAEB98
0012DD68  |0012DD88
0012DD6C  |00000000
0012DD70  |0012DD4C  返回到 0012DD4C
0012DD74  |0012DDB0  指向下一个 SEH 记录的指针
0012DD78  |6517632A  SE处理程序
0012DD7C  |00000000
0012DD80  ]0012DDBC
0012DD84  |6512EBB7  返回到 LoginPan.6512EBB7 来自 LoginPan.651451B6
0012DD88  |01F19670  UNICODE "/MLogin:EE4C3694-CAF5-420C-8938-9E2ADCD677FA_0_0__"
0012DD8C  |A118A59A
0012DD90  |00000000
0012DD94  |01EDBAD0
0012DD98  |0012DEFC
0012DD9C  |00000000
0012DDA0  |0012DD88
0012DDA4  |0012DDC4
0012DDA8  |01FAEBA8  UNICODE "/MLogin:EE4C3694-CAF5-420C-8938-9E2ADCD677FA_0_0__"
0012DDAC  |300DB762  返回到 Common.300DB762 来自 Common.300DB508
0012DDB0  |0012DE3C  指向下一个 SEH 记录的指针
0012DDB4  |65173A28  SE处理程序
0012DDB8  |00000003
0012DDBC  ]0012DDDC
0012DDC0  |6512FD7F  返回到 LoginPan.6512FD7F 来自 LoginPan.6512EABB
0012DDC4  |00F335BC
0012DDC8  |00000000
0012DDCC  |0012DEFC
0012DDD0  |00000000
0012DDD4  |01EDBAD0
0012DDD8  |01EDBAD0
0012DDDC  ]0012DE00
0012DDE0  |65138853  返回到 LoginPan.65138853 来自 LoginPan.6512FC9C
0012DDE4  |01EDBF60
0012DDE8  |0012DDC4
0012DDEC  |0012DF9C
0012DDF0  |0012DF38
0012DDF4  |0012DEA8
0012DDF8  |00000000
0012DDFC  |0012DEA8
0012DE00  ]0012DE48
0012DE04  |30829411  返回到 GF.30829411
0012DE08  |01EDBF70
0012DE0C  |01EDBF60
0012DE10  |0012DEFC
0012DE14  |0012DF9C
0012DE18  |0012DF38
0012DE1C  |0012DEA8
0012DE20  |45865680
0012DE24  |01EDBF60
0012DE28  |00000000
0012DE2C  |00000001
0012DE30  |00000001
0012DE34  |01EDBF70
0012DE38  |01EDBF6C
0012DE3C  |0012DEB4  指向下一个 SEH 记录的指针
0012DE40  |3094D379  SE处理程序
0012DE44  |00000001
0012DE48  ]0012DEC0
0012DE4C  |3082562B  返回到 GF.3082562B 来自 GF.30829384
0012DE50  |01EDBF60
0012DE54  |01EDBF60
0012DE58  |0012DEFC
0012DE5C  |0012DF9C
0012DE60  |0012DF38
0012DE64  |0012DEA8
0012DE68  |45865608
0012DE6C  |00000105
0012DE70  |01F133B0
0012DE74  |00000100
0012DE78  |0012DF0C  ASCII "A<"
0012DE7C  |01EE3718
0012DE80  |01EE3718
0012DE84  |01EE3738
0012DE88  |00000000
0012DE8C  |0012DE78
0012DE90  |01EE3718
0012DE94  |00000000
0012DE98  |0012DE78
0012DE9C  |01EE3718
0012DEA0  |00000000
0012DEA4  |0012DEB0
0012DEA8  |00000001
0012DEAC  |01EDBF60
0012DEB0  |00000000
0012DEB4  |0012E840  指向下一个 SEH 记录的指针
0012DEB8  |3094CEAB  SE处理程序
0012DEBC  |00000002
0012DEC0  ]0012DEE0  返回到 0012DEE0
0012DEC4  |30918690  返回到 GF.30918690 来自 GF.Util::GF::DispatchFrameMsg
0012DEC8  |00FFB0F8
0012DECC  |0012DEFC
0012DED0  |0012DF9C
0012DED4  |0012DF38
0012DED8  |00000000
0012DEDC  |309ADC48  GF.309ADC48
0012DEE0  ]0012DF24
0012DEE4  |309192CB  返回到 GF.309192CB 来自 GF.30918658
0012DEE8  |01EDBF60
0012DEEC  |0012DEFC
0012DEF0  |0012DF9C
0012DEF4  |0012DF38
0012DEF8  |00000000
0012DEFC  |000005DC
0012DF00  |00000000
0012DF04  |0012DED0
0012DF08  |00000000
0012DF0C  |00003C41
0012DF10  |00000000
0012DF14  |00000000
0012DF18  |FFFFFFFF
0012DF1C  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
0012DF20  |77D2A013  返回到 user32.77D2A013 来自 user32.77D1875F
0012DF24  ]0012DF40
0012DF28  |30921FA5  返回到 GF.30921FA5
0012DF2C  |01F133B0
0012DF30  |00003C41
0012DF34  |00000000
0012DF38  |00000000
0012DF3C  |0012DF9C
0012DF40  ]0012DF68
0012DF44  |30921211  返回到 GF.30921211
0012DF48  |000B0582
0012DF4C  |00003C41
0012DF50  |00000000
0012DF54  |00000000
0012DF58  |0012DF9C
0012DF5C  |00003C41
0012DF60  |00FF6B20
0012DF64  |0000084F
0012DF68  ]0012DF80
0012DF6C  |30922171  返回到 GF.30922171
0012DF70  |00003C41
0012DF74  |00000000
0012DF78  |00000000
0012DF7C  |0012DF9C
0012DF80  ]0012DFD0
0012DF84  |30801A54  返回到 GF.30801A54
0012DF88  |000B0582
0012DF8C  |00003C41
0012DF90  |00000000
0012DF94  |00000000
0012DF98  |0012DFD8
0012DF9C  |00000000
0012DFA0  |00003C41
0012DFA4  |000007E8
0012DFA8  |000B0582
0012DFAC  |00003C41
0012DFB0  |00000000
0012DFB4  |00000000
0012DFB8  |00000000
0012DFBC  |00000000
0012DFC0  |00000000
0012DFC4  |00000024
0012DFC8  |00000001
0012DFCC  |00000000
0012DFD0  ]0012E84C
0012DFD4  |65141C29  返回到 LoginPan.65141C29
0012DFD8  |00FF6B20
0012DFDC  |0012EDB0  返回到 0012EDB0
0012DFE0  |00000000
0012DFE4  |00000000
0012DFE8  |A118906A
0012DFEC  |0012E948
0012DFF0  |651CA56C  LoginPan.651CA56C
0012DFF4  |00000000
0012DFF8  |0012E04C
0012DFFC  |0012E018
0012E000  |30920907  返回到 GF.30920907
0012E004  |000B0582
0012E008  |00000000
0012E00C  |0000000F
0012E010  |00FF6B20
0012E014  |0000084F
0012E018  |0012E030
0012E01C  |30922171  返回到 GF.30922171
0012E020  |0000000F
0012E024  |00000000
0012E028  |00000000
0012E02C  |0012E04C
0012E030  |0012E080
0012E034  |30801A54  返回到 GF.30801A54
0012E038  |000B0582
0012E03C  |0000000F
0012E040  |00000000
0012E044  |00000000
0012E048  |0012E088
0012E04C  |00000001
0012E050  |0000000F
0012E054  |000007E8
0012E058  |000B0582
0012E05C  |0000000F
0012E060  |00000000
0012E064  |00000000
0012E068  |00000000
0012E06C  |00000000
0012E070  |00000000
0012E074  |00000024
0012E078  |00000001
0012E07C  |00000000
0012E080  |0012E8FC  ASCII "瞳很"
0012E084  |65141C29  返回到 LoginPan.65141C29
0012E088  |00000000
0012E08C  |0012EDB0  返回到 0012EDB0
0012E090  |6516E249  返回到 LoginPan.6516E249 来自 LoginPan.6516E144
0012E094  |651416D8  返回到 LoginPan.651416D8 来自 LoginPan.6516E23F
0012E098  |A11890DA
0012E09C  |0012E9F8
0012E0A0  |651CA56C  LoginPan.651CA56C
0012E0A4  |00000000
0012E0A8  |00000000
0012E0AC  |00000000
0012E0B0  |00000000
0012E0B4  |00000000
0012E0B8  |00000000
0012E0BC  |00000000
0012E0C0  |00000000
0012E0C4  |00000000
0012E0C8  |00000000
0012E0CC  |00000000
0012E0D0  |00000000
0012E0D4  |00000000
0012E0D8  |00000000
0012E0DC  |00000000
0012E0E0  |00000000
0012E0E4  |00000000
0012E0E8  |000B0582
0012E0EC  |00000000
0012E0F0  |00000000
0012E0F4  |00000000
0012E0F8  |00000000
0012E0FC  |00000000
0012E100  |00000000
0012E104  |00000000
0012E108  |00000000
0012E10C  |00000000
0012E110  |00000000
0012E114  |00000000
0012E118  |00000000
0012E11C  |00000000
0012E120  |00000000
0012E124  |00000000
0012E128  |00000000
0012E12C  |00000000
0012E130  |00000000
0012E134  |00000000
0012E138  |00000000
0012E13C  |00000000
0012E140  |00000000
0012E144  |00000000
0012E148  |00000000
0012E14C  |00000000
0012E150  |00000000
0012E154  |00000000
0012E158  |00000000
0012E15C  |00000000
0012E160  |00000000
0012E164  |00000000
0012E168  |00000000
0012E16C  |00000000
0012E170  |00000000
0012E174  |00000000
0012E178  |00000000
0012E17C  |00000000
0012E180  |00000000
0012E184  |00000000
0012E188  |00000000
0012E18C  |00000000
0012E190  |00000000
0012E194  |00000000
0012E198  |00000000
0012E19C  |00000000
0012E1A0  |00000000
0012E1A4  |00000000
0012E1A8  |00000000
0012E1AC  |00000000
0012E1B0  |00000000
0012E1B4  |00000000
0012E1B8  |00000000
0012E1BC  |00000000
0012E1C0  |00000000
0012E1C4  |00000000
0012E1C8  |00000000
0012E1CC  |00000000
0012E1D0  |00000000
0012E1D4  |00000000
0012E1D8  |00000000
0012E1DC  |00000000
0012E1E0  |00000000
0012E1E4  |00000000
0012E1E8  |00000000
0012E1EC  |00000000
0012E1F0  |00000000
0012E1F4  |00000000
0012E1F8  |00000000
0012E1FC  |00000000
0012E200  |00000000
0012E204  |00000000
0012E208  |00000000
0012E20C  |00000000
0012E210  |00000000
0012E214  |00000000
0012E218  |00000000
0012E21C  |00000000
0012E220  |00000000
0012E224  |00000000
0012E228  |00000000
0012E22C  |00000000
0012E230  |00000000
0012E234  |00000000
0012E238  |00000000
0012E23C  |00000000
0012E240  |00000000
0012E244  |00000000
0012E248  |00000000
0012E24C  |00000000
0012E250  |00000000
0012E254  |00000000
0012E258  |00000000
0012E25C  |00000000
0012E260  |00000000
0012E264  |00000000
0012E268  |00000000
0012E26C  |00000000
0012E270  |00000000
0012E274  |00000000
0012E278  |00000000
0012E27C  |00000000
0012E280  |00000000
0012E284  |00000000
0012E288  |00000000
0012E28C  |00000000
0012E290  |00000000
0012E294  |00000000
0012E298  |00000000
0012E29C  |00000000
0012E2A0  |00000000
0012E2A4  |00000000
0012E2A8  |00000000
0012E2AC  |00000000
0012E2B0  |00000000
0012E2B4  |00000000
0012E2B8  |00000000
0012E2BC  |00000000
0012E2C0  |00000000
0012E2C4  |00000000
0012E2C8  |00000000
0012E2CC  |00000000
0012E2D0  |00000000
0012E2D4  |00000000
0012E2D8  |00000000
0012E2DC  |00000000
0012E2E0  |00000000
0012E2E4  |00000000
0012E2E8  |00000000
0012E2EC  |00000000
0012E2F0  |00000000
0012E2F4  |00000000
0012E2F8  |00000000
0012E2FC  |0012E30C
0012E300  |00000000
0012E304  |7C930098  返回到 ntdll.7C930098 来自 ntdll.7C922AB0
0012E308  |01FB0868  ASCII "\t"
0012E30C  |0012E3D8
0012E310  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
0012E314  |003F0838
0012E318  |7C93003D  返回到 ntdll.7C93003D
0012E31C  |01FB0870
0012E320  |01FB0870
0012E324  |003FC0E8
0012E328  |00000000
0012E32C  |00000000
0012E330  |00000000
0012E334  |00000000
0012E338  |00000000
0012E33C  |00000000
0012E340  |00000000
0012E344  |00000000
0012E348  |00000000
0012E34C  |00000000
0012E350  |00000000
0012E354  |00000000
0012E358  |00000000
0012E35C  |00000000
0012E360  |00000000
0012E364  |00000000
0012E368  |00000000
0012E36C  |00000000
0012E370  |00000000
0012E374  |00000000
0012E378  |00000048
0012E37C  |00000000
0012E380  |00000000
0012E384  |00000000
0012E388  |00000000
0012E38C  |00000000
0012E390  |00000000
0012E394  |00000000
0012E398  |00000000
0012E39C  |00000000
0012E3A0  |003F0000
0012E3A4  |00000000
0012E3A8  |00000000
0012E3AC  |00000000
0012E3B0  |00000000
0012E3B4  |00000000
0012E3B8  |00010000  UNICODE "ALLUSERSPROFILE=C:\Documents and Settings\All User"
0012E3BC  |00000009
0012E3C0  |0012E31C
0012E3C4  |00000000
0012E3C8  |0012E414  UNICODE "}"
0012E3CC  |7C92E900  ntdll.7C92E900
0012E3D0  |7C930040  ntdll.7C930040
0012E3D4  |FFFFFFFF
0012E3D8  |7C93003D  返回到 ntdll.7C93003D
0012E3DC  |0012E4D4
0012E3E0  |77D28D20  user32.DefWindowProcW
0012E3E4  |00000000
0012E3E8  |78134C58  返回到 msvcr80.78134C58 来自 msvcr80.78138CD9
0012E3EC  |230385D0
0012E3F0  |01FB0870
0012E3F4  |0012E650
0012E3F8  |003FC0E8
0012E3FC  |003FC234
0012E400  |003FC234
0012E404  |0012E414  UNICODE "}"
0012E408  |0012E424
0012E40C  |77D28DD9  返回到 user32.77D28DD9 来自 user32.77D28BFB
0012E410  |000A0796
0012E414  |0000007D
0012E418  |FFFFFFF0
0012E41C  |0012E6E0
0012E420  |00000002
0012E424  |0012E51C
0012E428  |77D28D20  user32.DefWindowProcW
0012E42C  |00000000
0012E430  |0000007D
0012E434  |FFFFFFF0
0012E438  |00000002
0012E43C  |0012E534
0012E440  |77D28D20  user32.DefWindowProcW
0012E444  |00000000
0012E448  |00000000
0012E44C  |77D28D20  user32.DefWindowProcW
0012E450  |0012E46C
0012E454  |77D28DD9  返回到 user32.77D28DD9 来自 user32.77D28BFB
0012E458  |000A0796
0012E45C  |00000047
0012E460  |00000000
0012E464  |0012E728
0012E468  |00000000
0012E46C  |0012E4B4
0012E470  |77D28D77  返回到 user32.77D28D77 来自 user32.77D28DB2
0012E474  |000A0796
0012E478  |00000047
0012E47C  |00000000
0012E480  |77D28D8B  返回到 user32.77D28D8B 来自 user32.77D18600
0012E484  |0012E51C
0012E488  |77D28D20  user32.DefWindowProcW
0012E48C  |00000000
0012E490  |00000000
0012E494  |77D28D20  user32.DefWindowProcW
0012E498  |00000000
0012E49C  |0012E484
0012E4A0  |77D28D20  user32.DefWindowProcW
0012E4A4  |0012E538
0012E4A8  |77D4048F  user32.77D4048F
0012E4AC  |77D28D90  user32.77D28D90
0012E4B0  |FFFFFFFF
0012E4B4  |77D28D8B  返回到 user32.77D28D8B 来自 user32.77D18600
0012E4B8  |77D18734  返回到 user32.77D18734
0012E4BC  |000A0796
0012E4C0  |00000047
0012E4C4  |00000000
0012E4C8  |0012E728
0012E4CC  |77D28D20  user32.DefWindowProcW
0012E4D0  |DCBAABCD
0012E4D4  |00000000
0012E4D8  |0012E51C
0012E4DC  |77D28D20  user32.DefWindowProcW
0012E4E0  |0012E548
0012E4E4  |77D18816  返回到 user32.77D18816 来自 user32.77D1870C
0012E4E8  |7FFDF000
0012E4EC  |0012E548
0012E4F0  |77D1885A  返回到 user32.77D1885A 来自 ntdll.RtlDeactivateActivationContextUnsafeFast
0012E4F4  |0012E508
0012E4F8  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
0012E4FC  |00000047
0012E500  |77D28D20  user32.DefWindowProcW
0012E504  |00000082
0012E508  |00000014
0012E50C  |00000001
0012E510  |00000000
0012E514  |00000000
0012E518  |00000010
0012E51C  |00000000
0012E520  |00000014
0012E524  |00000000
0012E528  |00000000
0012E52C  |00000000
0012E530  |0012E4FC  UNICODE "G"
0012E534  |00000000
0012E538  |0012E680
0012E53C  |77D4048F  user32.77D4048F
0012E540  |77D18830  user32.77D18830
0012E544  |FFFFFFFF
0012E548  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
0012E54C  |77D2A013  返回到 user32.77D2A013 来自 user32.77D1875F
0012E550  |00000000
0012E554  |77D28D20  user32.DefWindowProcW
0012E558  |000A0796
0012E55C  |00000047
0012E560  |00000000
0012E564  |0012E728
0012E568  |00000000
0012E56C  |00000000
0012E570  |00000047
0012E574  |01F8CCC8
0012E578  |0012E598
0012E57C  |77D2A039  返回到 user32.77D2A039 来自 user32.77D29FC2
0012E580  |77D28D20  user32.DefWindowProcW
0012E584  |000A0796
0012E588  |00000047
0012E58C  |00000000
0012E590  |0012E728
0012E594  |00000000
0012E598  |0012E5B4
0012E59C  |30801988  返回到 GF.30801988 来自 user32.CallWindowProcW
0012E5A0  |77D28D20  user32.DefWindowProcW
0012E5A4  |000A0796
0012E5A8  |00000047
0012E5AC  |00000000
0012E5B0  |0012E728
0012E5B4  |0012E5FC
0012E5B8  |30801A70  返回到 GF.30801A70 来自 GF.30801970
0012E5BC  |00000047
0012E5C0  |00000000
0012E5C4  |0012E728
0012E5C8  |00000000
0012E5CC  |0012E664
0012E5D0  |01290F90
0012E5D4  |000A0796
0012E5D8  |00000047
0012E5DC  |01290F90
0012E5E0  |0012E728
0012E5E4  |00000000
0012E5E8  |00000000
0012E5EC  |00000000
0012E5F0  |00000024
0012E5F4  |00000001
0012E5F8  |00000000
0012E5FC  |0012E628
0012E600  |77D18734  返回到 user32.77D18734
0012E604  |00000000
0012E608  |00000000
0012E60C  |00000000
0012E610  |0012E728
0012E614  |01290F90
0012E618  |DCBAABCD
0012E61C  |00000000
0012E620  |0012E664
0012E624  |01290F90
0012E628  |0012E690
0012E62C  |77D18816  返回到 user32.77D18816 来自 user32.77D1870C
0012E630  |7FFDF000
0012E634  |0012E690
0012E638  |77D1885A  返回到 user32.77D1885A 来自 ntdll.RtlDeactivateActivationContextUnsafeFast
0012E63C  |0012E650
0012E640  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
0012E644  |00000000
0012E648  |000A0796
0012E64C  |000A0796
0012E650  |00000014
0012E654  |00000001
0012E658  |00000000
0012E65C  |00000000
0012E660  |00000010
0012E664  |00000000
0012E668  |00000014
0012E66C  |00000000
0012E670  |00000000
0012E674  |00000000
0012E678  |0012E644
0012E67C  |00000000
0012E680  |0012E6D4
0012E684  |77D4048F  user32.77D4048F
0012E688  |77D18830  user32.77D18830
0012E68C  |FFFFFFFF
0012E690  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
0012E694  |77D28EA0  返回到 user32.77D28EA0 来自 user32.77D1875F
0012E698  |00000000
0012E69C  |01290F90
0012E6A0  |000A0796
0012E6A4  |00000047
0012E6A8  |00000000
0012E6AC  |0012E728
0012E6B0  |00643634
0012E6B4  |77D28EAB  返回到 user32.77D28EAB 来自 user32.77D18600
0012E6B8  |94000000
0012E6BC  |77D188A6  user32.GetWindowLongW
0012E6C0  |000A0796
0012E6C4  |00000000
0012E6C8  |00000000
0012E6CC  |0012E6B8
0012E6D0  |94000000
0012E6D4  |0012E85C
0012E6D8  |77D4048F  user32.77D4048F
0012E6DC  |77D28EB0  user32.77D28EB0
0012E6E0  |0012E6F0
0012E6E4  |00000000
0012E6E8  |7C930098  返回到 ntdll.7C930098 来自 ntdll.7C922AB0
0012E6EC  |01F90568
0012E6F0  |0012E7BC
0012E6F4  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
0012E6F8  |003F06E8
0012E6FC  |7C93003D  返回到 ntdll.7C93003D
0012E700  |01F61940  返回到 01F61940
0012E704  |01F90570
0012E708  |00000000
0012E70C  |94000000
0012E710  |77D188A6  user32.GetWindowLongW
0012E714  |0012E74C
0012E718  |77D188D1  返回到 user32.77D188D1 来自 user32.77D18860
0012E71C  |00643620
0012E720  |FFFFFFF0
0012E724  |77D188DA  返回到 user32.77D188DA 来自 user32.77D18600
0012E728  |94000000
0012E72C  |77D188A6  user32.GetWindowLongW
0012E730  |000A0796
0012E734  |0012E728
0012E738  |000001BD
0012E73C  |0012E85C
0012E740  |77D4048F  user32.77D4048F
0012E744  |77D188E0  user32.77D188E0
0012E748  |FFFFFFFF
0012E74C  |77D188DA  返回到 user32.77D188DA 来自 user32.77D18600
0012E750  |308F73A3  返回到 GF.308F73A3
0012E754  |000A0796
0012E758  |FFFFFFF0
0012E75C  |00000010
0012E760  |01F8CCCC  返回到 01F8CCCC
0012E764  |00000000
0012E768  |0012E780
0012E76C  |308FC256  返回到 GF.308FC256 来自 user32.ShowWindow
0012E770  |00000010
0012E774  |00000000
0012E778  |01F8CCF0
0012E77C  |0012E9B8
0012E780  |0012E78C
0012E784  |003F0000
0012E788  |00000000
0012E78C  |0012E7C8
0012E790  |308B9D36  返回到 GF.308B9D36
0012E794  |0012E9B8
0012E798  |0012EA08
0012E79C  |0001EA0C
0012E7A0  |00000002
0012E7A4  |0012E700
0012E7A8  |00000000
0012E7AC  |00000002
0012E7B0  |0012E930
0012E7B4  |016C6BD0  QQPinyin.016C6BD0
0012E7B8  |000507E4
0012E7BC  |7C93003D  返回到 ntdll.7C93003D
0012E7C0  |78134C39  返回到 msvcr80.78134C39 来自 ntdll.RtlFreeHeap
0012E7C4  |003F0000
0012E7C8  |00000000
0012E7CC  |78134C58  返回到 msvcr80.78134C58 来自 msvcr80.78138CD9
0012E7D0  |230389FC
0012E7D4  |01F61940  返回到 01F61940
0012E7D8  |0012E838
0012E7DC  |0012E7F8
0012E7E0  |77D28DD9  返回到 user32.77D28DD9 来自 user32.77D28BFB
0012E7E4  |000507E4
0012E7E8  |00000046
0012E7EC  |00000000
0012E7F0  |0012E9F4
0012E7F4  |00000000
0012E7F8  |0012E840
0012E7FC  |77D28D77  返回到 user32.77D28D77 来自 user32.77D28DB2
0012E800  |000507E4
0012E804  |00000046
0012E808  |00000000
0012E80C  |77D28D8B  返回到 user32.77D28D8B 来自 user32.77D18600
0012E810  |0012E930
0012E814  |016C6BD0  QQPinyin.016C6BD0
0012E818  |000507E4
0012E81C  |00000000
0012E820  |00000000
0012E824  |00000000
0012E828  |0012E810
0012E82C  |7C930961  返回到 ntdll.7C930961 来自 ntdll.RtlLeaveCriticalSection
0012E830  |0012E94C
0012E834  |77D4048F  user32.77D4048F
0012E838  |77D28D90  user32.77D28D90
0012E83C  |A118906A
0012E840  |0012E8BC  指向下一个 SEH 记录的指针
0012E844  |65175BA7  SE处理程序
0012E848  |FFFFFFFF
0012E84C  ]0012E8C8
0012E850  |6515C84A  返回到 LoginPan.6515C84A
0012E854  |000B0582
0012E858  |00003C41
0012E85C  |00000000
0012E860  |00000000
0012E864  |A11890EE
0012E868  |0012E948
0012E86C  |6515C8C2  LoginPan.6515C8C2
0012E870  |00000000
0012E874  |01EE3710
0012E878  |0012E944
0012E87C  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
0012E880  |003F0778
0012E884  |7C93003D  返回到 ntdll.7C93003D
0012E888  |00000003
0012E88C  |01EE3718
0012E890  |00000000
0012E894  |00000068
0012E898  |0012E900
0012E89C  |69DF69E7
0012E8A0  |0012E930
0012E8A4  |016CF0A0  QQPinyin.016CF0A0
0012E8A8  |6510AF6C  返回到 LoginPan.6510AF6C 来自 LoginPan.6516E22B
0012E8AC  |651CA56C  LoginPan.651CA56C
0012E8B0  |0012E948
0012E8B4  |6515C8C2  LoginPan.6515C8C2
0012E8B8  |00000000
0012E8BC  |0012E964  指向下一个 SEH 记录的指针
0012E8C0  |65179D23  SE处理程序
0012E8C4  |FFFFFFFF
0012E8C8  ]0012E8E0
0012E8CC  |6515C8DD  返回到 LoginPan.6515C8DD 来自 LoginPan.6515C47E
0012E8D0  |000B0582
0012E8D4  |00003C41
0012E8D8  |00000000
0012E8DC  |00000000
0012E8E0  ]0012E90C
0012E8E4  |77D18734  返回到 user32.77D18734
0012E8E8  |000B0582
0012E8EC  |00003C41
0012E8F0  |00000000
0012E8F4  |00000000
0012E8F8  |6515C8C2  LoginPan.6515C8C2
0012E8FC  |DCBAABCD
0012E900  |00000000
0012E904  |0012E948
0012E908  |6515C8C2  LoginPan.6515C8C2
0012E90C  ]0012E974
0012E910  |77D18816  返回到 user32.77D18816 来自 user32.77D1870C
0012E914  |6515C8C2  LoginPan.6515C8C2
0012E918  |000B0582
0012E91C  |00003C41
0012E920  |00000000
0012E924  |00000000
0012E928  |00000000
0012E92C  |000B0582
0012E930  |000B0582
0012E934  |00000014
0012E938  |00000001
0012E93C  |00000000
0012E940  |00000000
0012E944  |00000010
0012E948  |00000000
0012E94C  |0012E9A0
0012E950  |00000000
0012E954  |00000000
0012E958  |00000000
0012E95C  |0012E928
0012E960  |77D28EA0  返回到 user32.77D28EA0 来自 user32.77D1875F
0012E964  |0012E9B8  指向下一个 SEH 记录的指针
0012E968  |77D4048F  SE处理程序
0012E96C  |77D18830  user32.77D18830
0012E970  |00000000
0012E974  ]0012E9C8
0012E978  |77D28EA0  返回到 user32.77D28EA0 来自 user32.77D1875F
0012E97C  |00000000
0012E980  |6515C8C2  LoginPan.6515C8C2
0012E984  |000B0582
0012E988  |00003C41
0012E98C  |00000000
0012E990  |00000000
0012E994  |006466EC
0012E998  |00000001
0012E99C  |96080000
0012E9A0  |77D188A6  user32.GetWindowLongW
0012E9A4  |000B0582
0012E9A8  |77D28EB0  user32.77D28EB0
0012E9AC  |00000000
0012E9B0  |0012E99C
0012E9B4  |77D2BD34  返回到 user32.77D2BD34
0012E9B8  |0012EB8C  指向下一个 SEH 记录的指针
0012E9BC  |77D4048F  SE处理程序
0012E9C0  |77D28EB0  user32.77D28EB0
0012E9C4  |FFFFFFFF
0012E9C8  ]0012E9F0
0012E9CC  |77D28EEC  返回到 user32.77D28EEC
0012E9D0  |006466D8
0012E9D4  |00003C41
0012E9D8  |00000000
0012E9DC  |00000000
0012E9E0  |6515C8C2  LoginPan.6515C8C2
0012E9E4  |00000030
0012E9E8  |00000000
0012E9EC  |00000000
0012E9F0  ]0012EA34
0012E9F4  |7C92E453  返回到 ntdll.7C92E453
0012E9F8  |0012EA00
0012E9FC  |00000018
0012EA00  |006466D8
0012EA04  |00003C41
0012EA08  |00000000
0012EA0C  |00000000
0012EA10  |6515C8C2  LoginPan.6515C8C2
0012EA14  |77D28E53  user32.77D28E53
0012EA18  |77D2AF62  返回到 user32.77D2AF62
0012EA1C  |308F739B  返回到 GF.308F739B 来自 GF.308F72BF
0012EA20  |000B0582
0012EA24  |00000000
0012EA28  |00000000
0012EA2C  |01F61900
0012EA30  |000B0582
0012EA34  ]0012EA58
0012EA38  |308F8B7B  返回到 GF.308F8B7B 来自 user32.ShowWindow
0012EA3C  |000B0582
0012EA40  |00000000
0012EA44  |01F61900
0012EA48  |00000750
0012EA4C  |01F61900
0012EA50  |00000000
0012EA54  |000A0796
0012EA58  ]0012EAA0
0012EA5C  |308F46E3  返回到 GF.308F46E3 来自 GF.308F8B0A
0012EA60  |00000000
0012EA64  |00000750
0012EA68  |01F61900
0012EA6C  |00000000
0012EA70  |01F8A868
0012EA74  |01F8A8A4
0012EA78  |300D9102  Common.CTXBSTR::operator wchar_t *
0012EA7C  |3080D325  返回到 GF.3080D325 来自 kernel32.InterlockedDecrement
0012EA80  |01F90548
0012EA84  |01F8A868
0012EA88  |00000000
0012EA8C  |0012EAC8
0012EA90  |30807A8D  返回到 GF.30807A8D
0012EA94  |30807A94  返回到 GF.30807A94 来自 GF.30949737
0012EA98  |45866200
0012EA9C  |00000750
0012EAA0  ]0012EAB8
0012EAA4  |30887493  返回到 GF.30887493 来自 GF.308F46D0
0012EAA8  |00000000
0012EAAC  |01EDBF60
0012EAB0  |300D9102  Common.CTXBSTR::operator wchar_t *
0012EAB4  |01F61900
0012EAB8  ]0012EAC4
0012EABC  |3090E4A2  返回到 GF.3090E4A2
0012EAC0  |00000000
0012EAC4  ]0012EAD4
0012EAC8  |6510B4EB  返回到 LoginPan.6510B4EB
0012EACC  |01F618F8
0012EAD0  |00000000
0012EAD4  ]0012EB98
0012EAD8  |00AA75B3  返回到 AFUtil.00AA75B3
0012EADC  |01EDBF60
0012EAE0  |00000000
0012EAE4  |40C3726A
0012EAE8  |00000001
0012EAEC  |01EDBAD0
0012EAF0  |00000000
0012EAF4  |00000532
0012EAF8  |00000151
0012EAFC  |000006EF
0012EB00  |00000289
0012EB04  |00000001
0012EB08  |00000FA0
0012EB0C  |00F335BC
0012EB10  |FFFFFFF6
0012EB14  |01F9C490
0012EB18  |00000000
0012EB1C  |00000000
0012EB20  |78134C58  返回到 msvcr80.78134C58 来自 msvcr80.78138CD9
0012EB24  |23038AA8
0012EB28  |00000000
0012EB2C  |0102E8F0
0012EB30  |00000000
0012EB34  |00000000
0012EB38  |00000000
0012EB3C  |00000000
0012EB40  |0000001A
0012EB44  |00000138
0012EB48  |00000000
0012EB4C  |04050002
0012EB50  |00000001
0012EB54  |0210C41C  UNICODE "BOTTOMLEFT,RIGHT"
0012EB58  |00000238
0012EB5C  |00000618
0012EB60  |FFFFF7B0
0012EB64  |000B0582
0012EB68  |00000750
0012EB6C  |00000FA0
0012EB70  |01F8A850
0012EB74  |0010200D
0012EB78  |01FAC978
0012EB7C  |00000000
0012EB80  |01EDBF60
0012EB84  |01F9C490
0012EB88  |01F904D0
0012EB8C  |0012EBB8  指向下一个 SEH 记录的指针
0012EB90  |00AE019B  SE处理程序
0012EB94  |0000000A
0012EB98  ]0012EBC4
0012EB9C  |651329E0  返回到 LoginPan.651329E0 来自 AFUtil.Util::Misc::HideWnd_Animation
0012EBA0  |01F8A850
0012EBA4  |A11893E2
0012EBA8  |01EDBF70
0012EBAC  |01EDBAD0
0012EBB0  |00000000
0012EBB4  |01F93E38
0012EBB8  |0012EC38  指向下一个 SEH 记录的指针
0012EBBC  |65173F27  SE处理程序
0012EBC0  |00000001
0012EBC4  ]0012EBD8
0012EBC8  |651333C0  返回到 LoginPan.651333C0 来自 LoginPan.65132921
0012EBCC  |00000001
0012EBD0  |00000000
0012EBD4  |0012ED04
0012EBD8  ]0012EBFC
0012EBDC  |65138821  返回到 LoginPan.65138821 来自 LoginPan.6513339D
0012EBE0  |01EDBF60
0012EBE4  |0012ED04
0012EBE8  |0012EDA4
0012EBEC  |0012ED34
0012EBF0  |0012ECA4
0012EBF4  |00000000
0012EBF8  |0012ECA4
0012EBFC  ]0012EC44
0012EC00  |30829411  返回到 GF.30829411
0012EC04  |01EDBF70
0012EC08  |01EDBF60
0012EC0C  |0012ED04
0012EC10  |0012EDA4
0012EC14  |0012ED34
0012EC18  |0012ECA4
0012EC1C  |4586648C
0012EC20  |01EDBF60
0012EC24  |00000000
0012EC28  |00000001
0012EC2C  |00000001
0012EC30  |01EDBF70
0012EC34  |01EDBF6C
0012EC38  |0012ECB0  指向下一个 SEH 记录的指针
0012EC3C  |3094D379  SE处理程序
0012EC40  |00000001
0012EC44  ]0012ECBC
0012EC48  |3082562B  返回到 GF.3082562B 来自 GF.30829384
0012EC4C  |01EDBF60
0012EC50  |01EDBF60
0012EC54  |0012ED04
0012EC58  |0012EDA4
0012EC5C  |0012ED34
0012EC60  |0012ECA4
0012EC64  |45866474
0012EC68  |0012ED2C
0012EC6C  |01F133B0
0012EC70  |00000000
0012EC74  |00000000
0012EC78  |01F03FE0
0012EC7C  |01F03FE0
0012EC80  |01F04000
0012EC84  |00000000
0012EC88  |0012EC74
0012EC8C  |01F03FE0
0012EC90  |00000000
0012EC94  |0012EC74
0012EC98  |01F03FE0
0012EC9C  |00000000
0012ECA0  |0012ECAC
0012ECA4  |00000001
0012ECA8  |01EDBF60
0012ECAC  |00000000
0012ECB0  |0012F648  指向下一个 SEH 记录的指针
0012ECB4  |3094CEAB  SE处理程序
0012ECB8  |00000002
0012ECBC  ]0012ECDC
0012ECC0  |30918690  返回到 GF.30918690 来自 GF.Util::GF::DispatchFrameMsg
0012ECC4  |00FFB0F8
0012ECC8  |0012ED04
0012ECCC  |0012EDA4
0012ECD0  |0012ED34
0012ECD4  |00000000
0012ECD8  |01F133B0
0012ECDC  ]0012ED2C
0012ECE0  |309198ED  返回到 GF.309198ED 来自 GF.30918658
0012ECE4  |01EDBF60
0012ECE8  |0012ED04
0012ECEC  |0012EDA4
0012ECF0  |0012ED34
0012ECF4  |00000000
0012ECF8  |00FF6B20
0012ECFC  |0012EDA4
0012ED00  |00000100
0012ED04  |0000038A
0012ED08  |00000000
0012ED0C  |00000028
0012ED10  |00000000
0012ED14  |00000000
0012ED18  |00000000
0012ED1C  |00000000
0012ED20  |00000000
0012ED24  |00000000
0012ED28  |00000000
0012ED2C  ]0012ED50
0012ED30  |30921784  返回到 GF.30921784
0012ED34  |00000000
0012ED38  |00000000
0012ED3C  |0012ED4C
0012ED40  |0012EDA4
0012ED44  |00000000
0012ED48  |00000105
0012ED4C  |00000000
0012ED50  ]0012ED70
0012ED54  |309208F6  返回到 GF.309208F6
0012ED58  |000B0582
0012ED5C  |00000000
0012ED60  |0012EDA4
0012ED64  |00000010
0012ED68  |00FF6B20
0012ED6C  |0000084F
0012ED70  ]0012ED88
0012ED74  |30922171  返回到 GF.30922171
0012ED78  |00000010
0012ED7C  |00000000
0012ED80  |00000000
0012ED84  |0012EDA4
0012ED88  ]0012EDD8
0012ED8C  |30801A54  返回到 GF.30801A54
0012ED90  |000B0582
0012ED94  |00000010
0012ED98  |00000000
0012ED9C  |00000000
0012EDA0  |0012EDE0
0012EDA4  |00000000
0012EDA8  |00000010
0012EDAC  |000007E8
0012EDB0  |000B0582
0012EDB4  |00000010
0012EDB8  |00000000
0012EDBC  |00000000
0012EDC0  |00000000
0012EDC4  |00000000
0012EDC8  |00000000
0012EDCC  |00000024
0012EDD0  |00000001
0012EDD4  |7C93405C  UNICODE "\??\"
0012EDD8  ]0012F654
0012EDDC  |65141C29  返回到 LoginPan.65141C29
0012EDE0  |00FF6B20
0012EDE4  |00000000
0012EDE8  |00000000
0012EDEC  |00000000
0012EDF0  |A1188E72
0012EDF4  |0012F750
0012EDF8  |651CA56C  LoginPan.651CA56C
0012EDFC  |00000000
0012EE00  |09A1EFF8
0012EE04  |0012EDF4
0012EE08  |00000002
0012EE0C  |0012F038
0012EE10  |00000000
0012EE14  |7C930208  ntdll.7C930208
0012EE18  |FFFFFFFF
0012EE1C  |7C930202  返回到 ntdll.7C930202 来自 ntdll.7C92E8E6
0012EE20  |7C93017B  返回到 ntdll.7C93017B 来自 ntdll.7C9301D1
0012EE24  |7C9301BB  返回到 ntdll.7C9301BB 来自 ntdll.7C92E8E6
0012EE28  |099B9960
0012EE2C  |00000000
0012EE30  |00000000
0012EE34  |00530020
0012EE38  |00740065
0012EE3C  |00690074
0012EE40  |000B0582
0012EE44  |005C0073
0012EE48  |00640041
0012EE4C  |0069006D
0012EE50  |0069006E
0012EE54  |00740073
0012EE58  |00610072
0012EE5C  |006F0074
0012EE60  |005C0072
0012EE64  |00700041
0012EE68  |006C0070
0012EE6C  |00630069
0012EE70  |00740061
0012EE74  |006F0069
0012EE78  |0020006E
0012EE7C  |00610044
0012EE80  |00610074
0012EE84  |0054005C
0012EE88  |006E0065
0012EE8C  |00650063  UNICODE "w"
0012EE90  |0074006E
0012EE94  |0051005C
0012EE98  |00500051
0012EE9C  |006E0069
0012EEA0  |00690079
0012EEA4  |005C006E
0012EEA8  |0070006F
0012EEAC  |006E0065
0012EEB0  |00630061
0012EEB4  |00330063
0012EEB8  |0064002E
0012EEBC  |00740061
0012EEC0  |00000000
0012EEC4  |00000000
0012EEC8  |00000000
0012EECC  |00000000
0012EED0  |00000000
0012EED4  |00000000
0012EED8  |00000000
0012EEDC  |00000000
0012EEE0  |00000000
0012EEE4  |00000000
0012EEE8  |00000000
0012EEEC  |00000000
0012EEF0  |00000000
0012EEF4  |00000000
0012EEF8  |00000000
0012EEFC  |00000000
0012EF00  |00000000
0012EF04  |00000000
0012EF08  |00000000
0012EF0C  |00000000
0012EF10  |00000000
0012EF14  |00000000
0012EF18  |00000000
0012EF1C  |00000000
0012EF20  |00000000
0012EF24  |00000000
0012EF28  |00000000
0012EF2C  |00000000
0012EF30  |00000000
0012EF34  |00000000
0012EF38  |00000000
0012EF3C  |00000000
0012EF40  |00000000
0012EF44  |00000000
0012EF48  |00000000
0012EF4C  |00000000
0012EF50  |00000000
0012EF54  |00000000
0012EF58  |00000000
0012EF5C  |00000000
0012EF60  |00000000
0012EF64  |00000000
0012EF68  |00000000
0012EF6C  |00000000
0012EF70  |00000000
0012EF74  |00000000
0012EF78  |00000000
0012EF7C  |00000000
0012EF80  |00000000
0012EF84  |0012EF94
0012EF88  |00000000
0012EF8C  |7C930098  返回到 ntdll.7C930098 来自 ntdll.7C922AB0
0012EF90  |001953C8
0012EF94  |0012F060
0012EF98  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
0012EF9C  |00161378
0012EFA0  |7C93003D  返回到 ntdll.7C93003D
0012EFA4  |00000000
0012EFA8  |7C92FF0D  ntdll.RtlFreeHeap
0012EFAC  |00000000
0012EFB0  |00000000
0012EFB4  |00000000
0012EFB8  |00000000
0012EFBC  |00000000
0012EFC0  |00000000
0012EFC4  |00000000
0012EFC8  |00000000
0012EFCC  |00000000
0012EFD0  |00000000
0012EFD4  |00000000
0012EFD8  |00000000
0012EFDC  |00000000
0012EFE0  |00000000
0012EFE4  |00000002
0012EFE8  |00000000
0012EFEC  |00000000
0012EFF0  |00000000
0012EFF4  |00000000
0012EFF8  |0012F008
0012EFFC  |00000000
0012F000  |7C930098  返回到 ntdll.7C930098 来自 ntdll.7C922AB0
0012F004  |099B9958
0012F008  |0012F0D4
0012F00C  |7C930021  返回到 ntdll.7C930021 来自 ntdll.7C930072
0012F010  |001606E8
0012F014  |7C93003D  返回到 ntdll.7C93003D
0012F018  |099B9960
0012F01C  |09A1EFF8
0012F020  |00000000
0012F024  |00000010
0012F028  |0000F164
0012F02C  |00160000
0012F030  |0012EE28
0012F034  |7C934298  ntdll.7C934298
0012F038  |0012F0A8
0012F03C  |7C92E900  ntdll.7C92E900
0012F040  |7C9301C0  ntdll.7C9301C0
0012F044  |FFFFFFFF
0012F048  |7C9301BB  返回到 ntdll.7C9301BB 来自 ntdll.7C92E8E6
0012F04C  |018B634D  返回到 QQPinyin.018B634D 来自 ntdll.RtlAllocateHeap
0012F050  |00160000
0012F054  |00000000
0012F058  |00000001
0012F05C  |099B9960
0012F060  |00000000
0012F064  |0012F10C
0012F068  |0012F084
0012F06C  |018B53D4  返回到 QQPinyin.018B53D4 来自 QQPinyin.018B6304
0012F070  |00000000
0012F074  |00000010
0012F078  |00000540
0012F07C  |00000000
0012F080  |00000000
0012F084  |0012F0B4
0012F088  |018BB65A  返回到 QQPinyin.018BB65A 来自 QQPinyin.018B53B7
0012F08C  |018BB66F  返回到 QQPinyin.018BB66F 来自 QQPinyin.018D0280
0012F090  |69DF71F3
0012F094  |099B9960
0012F098  |0012F10C
0012F09C  |00160000
0012F0A0  |09A1EFF8
0012F0A4  |01660426  返回到 QQPinyin.01660426 来自 QQPinyin.018B4808
0012F0A8  |0012F170  UNICODE "i"
0012F0AC  |09A1EFF8
0012F0B0  |01A0065C  QQPinyin.01A0065C
0012F0B4  |00010000  UNICODE "ALLUSERSPROFILE=C:\Documents and Settings\All User"
0012F0B8  |00000002
0012F0BC  |0012F018
0012F0C0  |01A05E32  QQPinyin.01A05E32
0012F0C4  |0012F110
0012F0C8  |7C92E900  ntdll.7C92E900
0012F0CC  |7C930040  ntdll.7C930040
0012F0D0  |FFFFFFFF
0012F0D4  |7C93003D  返回到 ntdll.7C93003D
0012F0D8  |018B56CE  返回到 QQPinyin.018B56CE 来自 ntdll.RtlFreeHeap
0012F0DC  |00160000
0012F0E0  |00000000
0012F0E4  |099B9960
0012F0E8  |0012F11C
0012F0EC  |0165A43E  返回到 QQPinyin.0165A43E 来自 QQPinyin.018B5B0F
0012F0F0  |099B9960
0012F0F4  |69DF705B
0012F0F8  |0012F344
0012F0FC  |00000000
0012F100  |0012F338
0012F104  |00000004
0012F108  |00000000
0012F10C  |7C92DA1C  返回到 ntdll.7C92DA1C
0012F110  |7C80C061  返回到 kernel32.7C80C061 来自 ntdll.ZwReleaseSemaphore
0012F114  |000001D4
0012F118  |0012F3EB
0012F11C  |0012F6BC
0012F120  |0012F3E9
0012F124  |018D3BC3  返回到 QQPinyin.018D3BC3 来自 QQPinyin.018B4808
0012F128  |FFFFFFFD
0012F12C  |0012F3E9
0012F130  |00000000
0012F134  |69DF707F
0012F138  |0012F148
0012F13C  |018C17AC  返回到 QQPinyin.018C17AC 来自 QQPinyin.018D3A40
0012F140  |00000020
0012F144  |0012F614
0012F148  |0012F5F0
0012F14C  |018C1C58  返回到 QQPinyin.018C1C58 来自 QQPinyin.018C1791
0012F150  |00000020
0012F154  |0012F614
0012F158  |0012F1D0
0012F15C  |00000019
0012F160  |09A44CE8  UNICODE "Logging in...(11111111)..."
0012F164  |018C2454  返回到 QQPinyin.018C2454 来自 QQPinyin.018B4808
0012F168  |0012F425
0012F16C  |00000000
0012F170  |00000069
0012F174  |00000064
0012F178  |00000001
0012F17C  |00000058
0012F180  |0012F62C
0012F184  |00000000
0012F188  |0000006F
0012F18C  |00000033
0012F190  |00000000
0012F194  |00178DD8
0012F198  |00000000
0012F19C  |00000027
0012F1A0  |00000000
0012F1A4  |019F6638  UNICODE "\n"
0012F1A8  |001781B0
0012F1AC  |00178DD0
0012F1B0  |00000001
0012F1B4  |00000001
0012F1B8  |00000058
0012F1BC  |00000000
0012F1C0  |00000001
0012F1C4  |00000000
0012F1C8  |0012F614
0012F1CC  |00000000
0012F1D0  |00000018
0012F1D4  |00000000
0012F1D8  |FFFFFFFD
0012F1DC  |00000003
0012F1E0  |00000000
0012F1E4  |0012F6BC
0012F1E8  |019AE48A  QQPinyin.019AE48A
0012F1EC  |00000000
0012F1F0  |000B0582
0012F1F4  |00000084
0012F1F8  |00000000
0012F1FC  |00000001
0012F200  |00000000
0012F204  |0012F644
0012F208  |00000000
0012F20C  |00000018
0012F210  |00000000
0012F214  |FFFFFFFD
0012F218  |00000003
0012F21C  |00000000
0012F220  |0012F6BC
0012F224  |019AE48A  QQPinyin.019AE48A
0012F228  |0012F23C  返回到 0012F23C
0012F22C  |77D1882A  返回到 user32.77D1882A 来自 user32.77D18600
0012F230  |00000000
0012F234  |000B0582
0012F238  |0012F2E8
0012F23C  |0012F284
0012F240  |0012F254
0012F244  |3084AC58  返回到 GF.3084AC58 来自 GF.3084AB6C
0012F248  |01F14690
0012F24C  |0012F2FC
0012F250  |0012F298
0012F254  |0012F268
0012F258  |3084AC58  返回到 GF.3084AC58 来自 GF.3084AB6C
0012F25C  |01F14690
0012F260  |0012F294
0012F264  |003F0000
0012F268  |0012F318
0012F26C  |0012F2B4
0012F270  |0012F284
0012F274  |3084AC58  返回到 GF.3084AC58 来自 GF.3084AB6C
0012F278  |01F14690
0012F27C  |309EE6B0  GF.309EE6B0
0012F280  |309EE6B0  GF.309EE6B0
0012F284  |0012F294
0012F288  |30819833  返回到 GF.30819833 来自 GF.3084AC47
0012F28C  |0012F318
0012F290  |0012F318
0012F294  |309EE6B0  GF.309EE6B0
0012F298  |0012F2BC
0012F29C  |308F7EA8  返回到 GF.308F7EA8 来自 GF.309142AD
0012F2A0  |0012F2AC
0012F2A4  |77D29CBA  返回到 user32.SetRectEmpty
0012F2A8  |01F146A0
0012F2AC  |309EE6B0  GF.309EE6B0
0012F2B0  |01F146A0
0012F2B4  |77D29CBA  返回到 user32.SetRectEmpty
0012F2B8  |0012F310
0012F2BC  |308F8438  返回到 GF.308F8438 来自 user32.UnionRect
0012F2C0  |00000000
0012F2C4  |308F84E9  返回到 GF.308F84E9 来自 ntdll.RtlLeaveCriticalSection
0012F2C8  |309EE6BC  GF.309EE6BC
0012F2CC  |00000000
0012F2D0  |00000001
0012F2D4  |00000000
0012F2D8  |000001BD
0012F2DC  |00000138
0012F2E0  |000000AD
0012F2E4  |0000008B
0012F2E8  |0000019B
0012F2EC  |00000000
0012F2F0  |00000000
0012F2F4  |000001BD
0012F2F8  |00000138
0012F2FC  |000000AD
0012F300  |0000008B
0012F304  |0000019B
0012F308  |000000AC
0012F30C  |309EE6BC  GF.309EE6BC
0012F310  |0012F324
0012F314  |308F8518  返回到 GF.308F8518 来自 GF.308F8370
0012F318  |000B0582
0012F31C  |0012F3D0
0012F320  |01F61900
0012F324  |0012F35C
0012F328  |308F4692  返回到 GF.308F4692 来自 user32.InvalidateRect
0012F32C  |000B0582
0012F330  |0012F3D0
0012F334  |00000000
0012F338  |01F12D10
0012F33C  |00000000
0012F340  |01EDBF60
0012F344  |00000000
0012F348  |01F12D10
0012F34C  |01F12D10
0012F350  |6510A368  返回到 LoginPan.6510A368 来自 kernel32.InterlockedDecrement
0012F354  |00000001
0012F358  |000B0582
0012F35C  |0012F368
0012F360  |3090E4BA  返回到 GF.3090E4BA
0012F364  |0012F3D0
0012F368  |0012F378
0012F36C  |6510A368  返回到 LoginPan.6510A368 来自 kernel32.InterlockedDecrement
0012F370  |01EDBF88
0012F374  |00000000
0012F378  |01EDBF60
0012F37C  |0012F3A8
0012F380  |30835C01  返回到 GF.30835C01
0012F384  |30835C08  返回到 GF.30835C08 来自 GF.30949737
0012F388  |45867B60
0012F38C  |00000000
0012F390  |0012F460
0012F394  |01F12D10
0012F398  |01EDBF60
0012F39C  |0012F42C
0012F3A0  |30953BD4  GF.30953BD4
0012F3A4  |FFFFFFFF
0012F3A8  |30835C08  返回到 GF.30835C08 来自 GF.30949737
0012F3AC  |308365B7  返回到 GF.308365B7 来自 GF.30835BB9
0012F3B0  |0012F3D0
0012F3B4  |00000000
0012F3B8  |01F12D08
0012F3BC  |01FD73B0
0012F3C0  |6510A368  返回到 LoginPan.6510A368 来自 kernel32.InterlockedDecrement
0012F3C4  |01EDBF88
0012F3C8  |0000137F
0012F3CC  |0012F3EC
0012F3D0  |000000AD
0012F3D4  |0000008B
0012F3D8  |0000019B
0012F3DC  |000000AC
0012F3E0  |00000005
0012F3E4  |00000005
0012F3E8  |000001B8
0012F3EC  |00000133
0012F3F0  |00000000
0012F3F4  |00000001
0012F3F8  |000B0582
0012F3FC  |3083BA8B  返回到 GF.3083BA8B 来自 kernel32.InterlockedDecrement
0012F400  |01F12E98
0012F404  |0012F438
0012F408  |003F0000
0012F40C  |7C930202  返回到 ntdll.7C930202 来自 ntdll.7C92E8E6
0012F410  |00000003
0012F414  |003F0718
0012F418  |003F0000
0012F41C  |01F93160
0012F420  |0012F410
0012F424  |01FD73B0
0012F428  |0012F654
0012F42C  |7C92E900  ntdll.7C92E900
0012F430  |7C930208  ntdll.7C930208
0012F434  |FFFFFFFF
0012F438  |7C930202  返回到 ntdll.7C930202 来自 ntdll.7C92E8E6
0012F43C  |7C93017B  返回到 ntdll.7C93017B 来自 ntdll.7C9301D1
0012F440  |7C9301BB  返回到 ntdll.7C9301BB 来自 ntdll.7C92E8E6
0012F444  |00000010
0012F448  |00000000
0012F44C  |300DE78C  返回到 Common.300DE78C 来自 Common.301317BF
0012F450  |B9E53A9C
0012F454  |00000000
0012F458  |300DE476  返回到 Common.300DE476
0012F45C  |302817B0  Common.302817B0
0012F460  |00000000
0012F464  |0000000F
0012F468  |00000000
0012F46C  |300D9040  返回到 Common.300D9040 来自 <jmp.&MSVCR80.memset>
0012F470  |30281794  Common.30281794
0012F474  |00000001
0012F478  |0012F48C
0012F47C  |300DB2BB  返回到 Common.300DB2BB 来自 <jmp.&MSVCR80.memcpy>
0012F480  |0210C464  UNICODE "GF.Draw"
0012F484  |302817A4  Common.302817A4
0012F488  |00000002
0012F48C  |0012F4B0
0012F490  |300DB1C1  返回到 Common.300DB1C1 来自 kernel32.InterlockedDecrement
0012F494  |30281798  Common.30281798
0012F498  |30281794  Common.30281794
0012F49C  |300DB3E3  返回到 Common.300DB3E3 来自 Common.300DB1B4
0012F4A0  |00000000
0012F4A4  |0000000F
0012F4A8  |0012F564
0012F4AC  |0012F564
0012F4B0  |E7F56EE4
0012F4B4  |0012F910
0012F4B8  |0012F4CC
0012F4BC  |300DB2BB  返回到 Common.300DB2BB 来自 <jmp.&MSVCR80.memcpy>
0012F4C0  |0210C464  UNICODE "GF.Draw"
0012F4C4  |0012F56C  UNICODE "TXGuiFoundation"
0012F4C8  |0000001E
0012F4CC  |0012F4E8
0012F4D0  |E7F56EE4
0012F4D4  |0012F4E8
0012F4D8  |300DB898  返回到 Common.300DB898 来自 Common.300DB2F9
0012F4DC  |300DE4CC  返回到 Common.300DE4CC
0012F4E0  |302817B0  Common.302817B0
0012F4E4  |0012F910
0012F4E8  |0210C454
0012F4EC  |0012F80C
0012F4F0  |0012F500
0012F4F4  |300DE679  返回到 Common.300DE679
0012F4F8  |0210C454
0012F4FC  |0210C454
0012F500  |0012F50C
0012F504  |300D9063  返回到 Common.300D9063 来自 Common.300DE654
0012F508  |0210C454
0012F50C  |0012F518
0012F510  |300DB18E  返回到 Common.300DB18E 来自 Common.300D9048
0012F514  |0210C454
0012F518  |0012F54C
0012F51C  |300DB1D2  返回到 Common.300DB1D2
0012F520  |0210C454
0012F524  |0012F564
0012F528  |300DBC60  返回到 Common.300DBC60 来自 Common.301317BF
0012F52C  |B9E53BA0
0012F530  |0012F910
0012F534  |000B0582
0012F538  |0012F80C
0012F53C  |0012F564
0012F540  |0012F778
0012F544  |30146EBD  Common.30146EBD
0012F548  |00000000
0012F54C  |69F0CC62  返回到 HummerEn.69F0CC62 来自 HummerEn.69F0CB56
0012F550  |69F07E63  返回到 HummerEn.69F07E63 来自 HummerEn.69F0CC58
0012F554  |406FBC87
0012F558  |0012F910
0012F55C  |000B0582
0012F560  |0012F80C
0012F564  |0210C464  UNICODE "GF.Draw"
0012F568  |002817B0
0012F56C  |00580054
0012F570  |00750047
0012F574  |00460069
0012F578  |0075006F
0012F57C  |0064006E
0012F580  |00740061
0012F584  |006F0069
0012F588  |0000006E
0012F58C  |00000000
0012F590  |00000000
0012F594  |00000000
0012F598  |00000000
0012F59C  |00000000
0012F5A0  |00000000
0012F5A4  |00000000
0012F5A8  |00000000
0012F5AC  |00000000
0012F5B0  |00000000
0012F5B4  |00000000
0012F5B8  |00000000
0012F5BC  |00000000
0012F5C0  |00000000
0012F5C4  |00000000
0012F5C8  |00000000
0012F5CC  |00000000
0012F5D0  |00000000
0012F5D4  |00000000
0012F5D8  |00000000
0012F5DC  |00000000
0012F5E0  |00000000
0012F5E4  |00000000
0012F5E8  |00000000
0012F5EC  |00000000
0012F5F0  |00000000
0012F5F4  |00000000
0012F5F8  |00000000
0012F5FC  |00000000
0012F600  |00000000
0012F604  |00000000
0012F608  |00000000
0012F60C  |00000000
0012F610  |00000000
0012F614  |00000000
0012F618  |00000000
0012F61C  |00000000
0012F620  |00000000
0012F624  |00000000
0012F628  |00000000
0012F62C  |00000000
0012F630  |00000000
0012F634  |00000000
0012F638  |00000000
0012F63C  |00000000
0012F640  |00000000
0012F644  |A1188E72
0012F648  |0012F6C4  指向下一个 SEH 记录的指针
0012F64C  |65175BA7  SE处理程序
0012F650  |FFFFFFFF
0012F654  ]0012F6D0
0012F658  |6515C84A  返回到 LoginPan.6515C84A
0012F65C  |000B0582
0012F660  |00000010
0012F664  |00000000
0012F668  |00000000
0012F66C  |A1188EF6
0012F670  |0012F750
0012F674  |6515C8C2  LoginPan.6515C8C2
0012F678  |00000000
0012F67C  |00000000
0012F680  |00000000
0012F684  |00000000
0012F688  |00000000
0012F68C  |00000000
0012F690  |00000000
0012F694  |00000000
0012F698  |00000000
0012F69C  |00000000
0012F6A0  |00000000
0012F6A4  |00000000
0012F6A8  |00000000
0012F6AC  |00000000
0012F6B0  |6510AF6C  返回到 LoginPan.6510AF6C 来自 LoginPan.6516E22B
0012F6B4  |651CA56C  LoginPan.651CA56C
0012F6B8  |0012F750
0012F6BC  |6515C8C2  LoginPan.6515C8C2
0012F6C0  |00000000
0012F6C4  |0012F76C  指向下一个 SEH 记录的指针
0012F6C8  |65179D23  SE处理程序
0012F6CC  |FFFFFFFF
0012F6D0  ]0012F6E8
0012F6D4  |6515C8DD  返回到 LoginPan.6515C8DD 来自 LoginPan.6515C47E
0012F6D8  |000B0582
0012F6DC  |00000010
0012F6E0  |00000000
0012F6E4  |00000000
0012F6E8  ]0012F714
0012F6EC  |77D18734  返回到 user32.77D18734
0012F6F0  |000B0582
0012F6F4  |00000010
0012F6F8  |00000000
0012F6FC  |00000000
0012F700  |6515C8C2  LoginPan.6515C8C2
0012F704  |DCBAABCD
0012F708  |00000000
0012F70C  |0012F750
0012F710  |6515C8C2  LoginPan.6515C8C2
0012F714  ]0012F77C
0012F718  |77D18816  返回到 user32.77D18816 来自 user32.77D1870C
0012F71C  |6515C8C2  LoginPan.6515C8C2
0012F720  |000B0582
0012F724  |00000010
0012F728  |00000000
0012F72C  |00000000
0012F730  |0012F814
0012F734  |0012F80C
0012F738  |006466D8
0012F73C  |00000014
0012F740  |00000001
0012F744  |00000000
0012F748  |00000000
0012F74C  |00000010
0012F750  |00000000
0012F754  |0012F784
0012F758  |00000000
0012F75C  |00000000
0012F760  |00000000
0012F764  |0012F730
0012F768  |0012F914
0012F76C  |0012F7CC  指向下一个 SEH 记录的指针
0012F770  |77D4048F  SE处理程序
0012F774  |77D18830  user32.77D18830
0012F778  |00000000
0012F77C  ]0012F7DC
0012F780  |77D189CD  返回到 user32.77D189CD 来自 user32.77D1875F
0012F784  |00000000
0012F788  |6515C8C2  LoginPan.6515C8C2
0012F78C  |000B0582
0012F790  |00000010
0012F794  |00000000
0012F798  |00000000
0012F79C  |006466EC
0012F7A0  |00000001
0012F7A4  |00FE08B0
0012F7A8  |0012F80C
0012F7AC  |00008FFF
0012F7B0  |00000001
0012F7B4  |0012F7EC
0012F7B8  |69F060DC  返回到 HummerEn.69F060DC 来自 HummerEn.69F04FFB
0012F7BC  |00000000
0012F7C0  |00000000
0012F7C4  |0012F7A4
0012F7C8  |0012F80C
0012F7CC  |0012F874  指向下一个 SEH 记录的指针
0012F7D0  |77D4048F  SE处理程序
0012F7D4  |77D189F0  user32.77D189F0
0012F7D8  |FFFFFFFF
0012F7DC  ]0012F7EC
0012F7E0  |77D18A10  返回到 user32.77D18A10 来自 user32.77D188F1
0012F7E4  |0012F80C
0012F7E8  |00000000
0012F7EC  ]0012F828
0012F7F0  |69F0652A  返回到 HummerEn.69F0652A 来自 user32.DispatchMessageW
0012F7F4  |0012F80C
0012F7F8  |69F10C00  HummerEn.69F10C00
0012F7FC  |69F0633C  返回到 HummerEn.69F0633C 来自 HummerEn.69F064C3
0012F800  |00000000
0012F804  |00FE08B0
0012F808  |69F10C10  UNICODE "func"
0012F80C  |000B0582
0012F810  |00000010
0012F814  |00000000
0012F818  |00000000
0012F81C  |00101E28
0012F820  |000006C2
0012F824  |00000165
0012F828  ]0012F844
0012F82C  |69F06059  返回到 HummerEn.69F06059
0012F830  |0012F934
0012F834  |69F10C04  UNICODE "file"
0012F838  |0012FA64
0012F83C  |0012FD00
0012F840  |00000001
0012F844  ]0012F880
0012F848  |69F04529  返回到 HummerEn.69F04529
0012F84C  |0012FA64
0012F850  |69F04BFA  返回到 HummerEn.69F04BFA 来自 HummerEn.69F04513
0012F854  |406FB383
0012F858  |0012F934
0012F85C  |69F10C04  UNICODE "file"
0012F860  |69F10C10  UNICODE "func"
0012F864  |00000001
0012F868  |01011800
0012F86C  |0012FA64
0012F870  |00000000
0012F874  |0012FD84  指向下一个 SEH 记录的指针
0012F878  |69F0E9D9  SE处理程序
0012F87C  |00000000
0012F880  ]0012FD90
0012F884  |69F0AF44  返回到 HummerEn.69F0AF44 来自 HummerEn.69F04BD9
0012F888  |406FB693
0012F88C  |7C92FE01  ntdll.RtlGetLastWin32Error
0012F890  |69F00000  HummerEn.69F00000
0012F894  |00000000
0012F898  |00000000
0012F89C  |00001000
0012F8A0  |00010000  UNICODE "ALLUSERSPROFILE=C:\Documents and Settings\All User"
0012F8A4  |7FFEFFFF
0012F8A8  |00000003
0012F8AC  |00000002
0012F8B0  |0000024A
0012F8B4  |00010000  UNICODE "ALLUSERSPROFILE=C:\Documents and Settings\All User"
0012F8B8  |18010017
0012F8BC  |00000020
0012F8C0  |0000000D
0012F8C4  |7FFFFFFF
0012F8C8  |7FFFFFFF
0012F8CC  |FFFFFFFF
0012F8D0  |FFFFFFFF
0012F8D4  |7FFE0000
0012F8D8  |7C301000
0012F8DC  |00000000
0012F8E0  |00000000
0012F8E4  |00000003
0012F8E8  |00000000
0012F8EC  |00000000
0012F8F0  |00000000
0012F8F4  |302817A4  Common.302817A4
0012F8F8  |302817A4  Common.302817A4
0012F8FC  |00000000
0012F900  |00000000
0012F904  |302817A4  Common.302817A4
0012F908  |89175E10
0012F90C  |00000000
0012F910  |69F110B4  HummerEn.69F110B4
0012F914  |00000000
0012F918  |00000000
0012F91C  |00000000
0012F920  |00000000
0012F924  |00000000
0012F928  |0012F93C
0012F92C  |00000002
0012F930  |00000002
0012F934  |020FB154  UNICODE "upload_data.qq.com"
0012F938  |00FEFF38
0012F93C  |00FDD208
0012F940  |01EDFB70
0012F944  |0012FD98
0012F948  |0000017C
0012F94C  |01046BC8
0012F950  |7C935BD8  返回到 ntdll.7C935BD8 来自 ntdll.RtlFreeUnicodeString
0012F954  |0012F998
0012F958  |0012FB38
0012F95C  |00000001
0012F960  |7C935C3D  返回到 ntdll.7C935C3D 来自 ntdll.7C92FE57
0012F964  |76990000  ole32.76990000
0012F968  |7C99B214  ntdll.7C99B214
0012F96C  |FFFFFFFD
0012F970  |00000000
0012F974  |0012FD8C
0012F978  |0012FB30
0012F97C  |00000000
0012F980  |0012FB38
0012F984  |00000000
0012F988  |0012FB28
0012F98C  |00000000
0012F990  |0012F9B0
0012F994  |78147344  返回到 msvcr80.78147344 来自 msvcr80.781472B7
0012F998  |0012F9F0
0012F99C  |7FFD8000
0012F9A0  |0012F9E8
0012F9A4  |0012F9C8
0012F9A8  |7C9396BF  返回到 ntdll.7C9396BF 来自 ntdll.wcsncpy
0012F9AC  |0012F9FC  UNICODE "Service Pack 3"
0012F9B0  |7F6F06C2  UNICODE "Service Pack 3"
0012F9B4  |0000000E
0012F9B8  |00000000
0012F9BC  |0000011C
0012F9C0  |0012F9E8
0012F9C4  |00000000
0012F9C8  |0012F9DC
0012F9CC  |7C80AF25  返回到 kernel32.7C80AF25 来自 ntdll.RtlGetVersion
0012F9D0  |0012F9E8
0012F9D4  |7C92FE01  ntdll.RtlGetLastWin32Error
0012F9D8  |69F00000  HummerEn.69F00000
0012F9DC  |0012FB00
0012F9E0  |300E7FCD  返回到 Common.300E7FCD 来自 kernel32.GetVersionExW
0012F9E4  |300E7FE1  返回到 Common.300E7FE1 来自 Common.301316D8
0012F9E8  |00000114
0012F9EC  |00000005
0012F9F0  |00000001
0012F9F4  |00000A28
0012F9F8  |00000002
0012F9FC  |00650053
0012FA00  |00760072
0012FA04  |00630069
0012FA08  |00200065
0012FA0C  |00610050
0012FA10  |006B0063
0012FA14  |00330020
0012FA18  |00000000
0012FA1C  |00000000
0012FA20  |00000000
0012FA24  |00000000
0012FA28  |00000000
0012FA2C  |00000000
0012FA30  |00000000
0012FA34  |00000000
0012FA38  |00000000
0012FA3C  |00000000
0012FA40  |0012FA74
0012FA44  |00160000
0012FA48  |7C930202  返回到 ntdll.7C930202 来自 ntdll.7C92E8E6
0012FA4C  |00000005
0012FA50  |00160778
0012FA54  |00160000
0012FA58  |00000000
0012FA5C  |0012FA4C
0012FA60  |00000000
0012FA64  |69F10C44  HummerEn.69F10C44
0012FA68  |00000000
0012FA6C  |7C930208  ntdll.7C930208
0012FA70  |00000000
0012FA74  |00000000
0012FA78  |00000000
0012FA7C  |00000000
0012FA80  |0012FDBC
0012FA84  |00000000
0012FA88  |00000000
0012FA8C  |00000000
0012FA90  |0012FAC4
0012FA94  |003F0000
0012FA98  |00000000
0012FA9C  |00000000
0012FAA0  |00000000
0012FAA4  |00000000
0012FAA8  |00FE08B0
0012FAAC  |0012FA9C
0012FAB0  |00000000
0012FAB4  |00000000
0012FAB8  |00000000
0012FABC  |00000000
0012FAC0  |00000000
0012FAC4  |7C930001  ntdll.7C930001
0012FAC8  |7C931066  返回到 ntdll.7C931066 来自 ntdll.RtlLeaveCriticalSection
0012FACC  |7C930100  ntdll.7C930100
0012FAD0  |0000002C
0012FAD4  |00000000
0012FAD8  |0000002C
0012FADC  |00000000
0012FAE0  |0000000F
0012FAE4  |00000000
0012FAE8  |00000000
0012FAEC  |00000000
0012FAF0  |00000000
0012FAF4  |00000000
0012FAF8  |00177CE0
0012FAFC  |FFFFFFFF
0012FB00  |00000000
0012FB04  |00000000
0012FB08  |00000000
0012FB0C  |000007D0
0012FB10  |0012F864
0012FB14  |00000000
0012FB18  |00000000
0012FB1C  |00000000
0012FB20  |0690007F
0012FB24  |00000000
0012FB28  |00000000
0012FB2C  |00000000
0012FB30  |00000000
0012FB34  |00000000
0012FB38  |00261E9C
0012FB3C  |69F10A40  HummerEn.69F10A40
0012FB40  |00260001
0012FB44  |00000000
0012FB48  |000001E8
0012FB4C  |013CFEB8
0012FB50  |00FE09B0
0012FB54  |0000007C
0012FB58  |000001FA
0012FB5C  |69676F4C
0012FB60  |006C6163
0012FB64  |7C80B4D0  kernel32.7C80B4D0
0012FB68  |00F90000
0012FB6C  |00000007
0012FB70  |0000000F
0012FB74  |003A0043
0012FB78  |0050005C
0012FB7C  |006F0072
0012FB80  |00720067
0012FB84  |006D0061
0012FB88  |00460020
0012FB8C  |006C0069
0012FB90  |00730065
0012FB94  |0054005C
0012FB98  |006E0065
0012FB9C  |00650063  UNICODE "w"
0012FBA0  |0074006E
0012FBA4  |0051005C
0012FBA8  |00490051
0012FBAC  |0074006E
0012FBB0  |005C006C
0012FBB4  |00690042
0012FBB8  |005C006E
0012FBBC  |00510051
0012FBC0  |0065002E
0012FBC4  |00650078
0012FBC8  |00000000
0012FBCC  |00000000
0012FBD0  |00000000
0012FBD4  |00000000
0012FBD8  |00000000
0012FBDC  |00000000
0012FBE0  |00000000
0012FBE4  |00000000
0012FBE8  |00000000
0012FBEC  |00000000
0012FBF0  |00000000
0012FBF4  |00000000
0012FBF8  |00000000
0012FBFC  |00000000
0012FC00  |00000000
0012FC04  |00000000
0012FC08  |00000000
0012FC0C  |00000000
0012FC10  |00000000
0012FC14  |00000000
0012FC18  |00000000
0012FC1C  |00000000
0012FC20  |00000000
0012FC24  |00000000
0012FC28  |00000000
0012FC2C  |00000000
0012FC30  |00000000
0012FC34  |00000000
0012FC38  |00000000
0012FC3C  |00000000
0012FC40  |00000000
0012FC44  |00000000
0012FC48  |00000000
0012FC4C  |00000000
0012FC50  |00000000
0012FC54  |00000000
0012FC58  |00000000
0012FC5C  |00000000
0012FC60  |00000000
0012FC64  |00000000
0012FC68  |00000000
0012FC6C  |00000000
0012FC70  |00000000
0012FC74  |00000000
0012FC78  |00000000
0012FC7C  |00000000
0012FC80  |00000000
0012FC84  |00000000
0012FC88  |00000000
0012FC8C  |00000000
0012FC90  |00000000
0012FC94  |00000000
0012FC98  |00000000
0012FC9C  |00000000
0012FCA0  |00000000
0012FCA4  |00000000
0012FCA8  |00000000
0012FCAC  |00000000
0012FCB0  |00000000
0012FCB4  |00000000
0012FCB8  |00000000
0012FCBC  |00000000
0012FCC0  |00000000
0012FCC4  |00000000
0012FCC8  |00000000
0012FCCC  |00000000
0012FCD0  |00000000
0012FCD4  |00000000
0012FCD8  |00000000
0012FCDC  |00000000
0012FCE0  |00000000
0012FCE4  |00000000
0012FCE8  |00000000
0012FCEC  |00000000
0012FCF0  |00000000
0012FCF4  |00000000
0012FCF8  |00000000
0012FCFC  |00000000
0012FD00  |00000000
0012FD04  |00000000
0012FD08  |00000000
0012FD0C  |00000000
0012FD10  |00000000
0012FD14  |00000000
0012FD18  |00000000
0012FD1C  |00000000
0012FD20  |00000000
0012FD24  |00000000
0012FD28  |00000000
0012FD2C  |00000000
0012FD30  |00000000
0012FD34  |00000000
0012FD38  |00000000
0012FD3C  |00000000
0012FD40  |00000000
0012FD44  |00000000
0012FD48  |00000000
0012FD4C  |00000000
0012FD50  |00000000
0012FD54  |00000000
0012FD58  |00000000
0012FD5C  |00000000
0012FD60  |00000000
0012FD64  |00000000
0012FD68  |00000000
0012FD6C  |00000000
0012FD70  |00000000
0012FD74  |00000000
0012FD78  |00000000
0012FD7C  |00000000
0012FD80  |406FB693
0012FD84  |0012FFB0  指向下一个 SEH 记录的指针
0012FD88  |69F0E30C  SE处理程序
0012FD8C  |00000007
0012FD90  ]0012FDDC
0012FD94  |69F0B146  返回到 HummerEn.69F0B146 来自 HummerEn.69F0A4A4
0012FD98  |69F10EF4  返回到 HummerEn.69F10EF4
0012FD9C  |00000258
0012FDA0  |00000000
0012FDA4  |00001101
0012FDA8  |00000434
0012FDAC  |69F1229C  HummerEn.69F1229C
0012FDB0  |00FE0658
0012FDB4  |69F1229C  HummerEn.69F1229C
0012FDB8  |00FE0690
0012FDBC  |00177CB8
0012FDC0  |FFFFFFFF
0012FDC4  |00000000
0012FDC8  |00000000
0012FDCC  |00000000
0012FDD0  |000007D0
0012FDD4  |0102D738
0012FDD8  |0012FD98
0012FDDC  ]0012FF20
0012FDE0  |004014D9  返回到 QQ.004014D9
0012FDE4  |0000000A
0012FDE8  |00404458  QQ.00404458
0012FDEC  |00000001
0012FDF0  |00000000
0012FDF4  |694A97C4
0012FDF8  |B642BF2B
0012FDFC  |82BB565D
0012FE00  |00000114
0012FE04  |00000005
0012FE08  |00000001
0012FE0C  |00000A28
0012FE10  |00000002
0012FE14  |00650053
0012FE18  |00760072
0012FE1C  |00630069
0012FE20  |00200065
0012FE24  |00610050
0012FE28  |006B0063
0012FE2C  |00330020
0012FE30  |00000000
0012FE34  |00000000
0012FE38  |00000000
0012FE3C  |00000000
0012FE40  |00000000
0012FE44  |00000000
0012FE48  |00000000
0012FE4C  |00000000
0012FE50  |00000000
0012FE54  |00000000
0012FE58  |00000000
0012FE5C  |00000000
0012FE60  |00000000
0012FE64  |00000000
0012FE68  |00000000
0012FE6C  |00000000
0012FE70  |00000000
0012FE74  |00000000
0012FE78  |00000000
0012FE7C  |00000000
0012FE80  |00000000
0012FE84  |00000000
0012FE88  |00000000
0012FE8C  |00000000
0012FE90  |00000000
0012FE94  |00000000
0012FE98  |00000000
0012FE9C  |00000000
0012FEA0  |00000000
0012FEA4  |00000000
0012FEA8  |00000000
0012FEAC  |00000000
0012FEB0  |00000000
0012FEB4  |00000000
0012FEB8  |00000000
0012FEBC  |00000000
0012FEC0  |00000000
0012FEC4  |00000000
0012FEC8  |00000000
0012FECC  |00000000
0012FED0  |00000000
0012FED4  |00000000
0012FED8  |00000000
0012FEDC  |00000000
0012FEE0  |00000000
0012FEE4  |00000000
0012FEE8  |00000000
0012FEEC  |00000000
0012FEF0  |00000000
0012FEF4  |00000000
0012FEF8  |00000000
0012FEFC  |00000000
0012FF00  |00000000
0012FF04  |00000000
0012FF08  |00000000
0012FF0C  |00000000
0012FF10  |00000000
0012FF14  |E1D92488
0012FF18  |FFFFFFFE
0012FF1C  |E18BEA24
0012FF20  ]0012FF2C
0012FF24  |0040128B  返回到 QQ.0040128B 来自 QQ.0040128F
0012FF28  |0000000A
0012FF2C  ]0012FFC0
0012FF30  |00401A8F  返回到 QQ.00401A8F 来自 QQ.00401280
0012FF34  |00400000  QQ.00400000
0012FF38  |00000000
0012FF3C  |00020668
0012FF40  |0000000A
0012FF44  |E18BE810
0012FF48  |005CA990
0012FF4C  |0012B880
0012FF50  |7FFD8000
0012FF54  |00000044
0012FF58  |000206E4
0012FF5C  |000206C4  UNICODE "WinSta0\Default"
0012FF60  |0002066C  UNICODE "C:\Program Files\Tencent\QQIntl\Bin\QQ.exe"
0012FF64  |00000000
0012FF68  |00000000
0012FF6C  |00000000
0012FF70  |00000000
0012FF74  |00000000
0012FF78  |00000000
0012FF7C  |00000000
0012FF80  |00000000
0012FF84  |00000000
0012FF88  |00000000
0012FF8C  |89175E10
0012FF90  |00000000
0012FF94  |0012FFBC
0012FF98  |00402017  返回到 QQ.00402017 来自 kernel32.QueryPerformanceCounter
0012FF9C  |00020668
0012FFA0  |00000000
0012FFA4  |00000000
0012FFA8  |0012FF44
0012FFAC  |A430230D
0012FFB0  |0012FFE0  指向下一个 SEH 记录的指针
0012FFB4  |00401C61  SE处理程序
0012FFB8  |E1D924A8
0012FFBC  |00000001
0012FFC0  \0012FFF0
0012FFC4   7C817077  返回到 kernel32.7C817077
0012FFC8   005CA990
0012FFCC   0012B880
0012FFD0   7FFD8000
0012FFD4   00000640
0012FFD8   0012FFC8
0012FFDC   89DDCC10
0012FFE0   FFFFFFFF  SEH 链尾部
0012FFE4   7C839AD8  SE处理程序
0012FFE8   7C817080  返回到 kernel32.7C817080
0012FFEC   00000000
0012FFF0   00000000
0012FFF4   00000000
0012FFF8   00401BFB  QQ.<ModuleEntryPoint>

