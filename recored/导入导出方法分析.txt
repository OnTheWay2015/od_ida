调用堆栈：     线程  00000568
地址       堆栈       函数过程 / 参数                       调用来自                      结构
0174FD98   71A25E32   ws2_32.71A25D82                       ws2_32.71A25E2D               0174FDE0
0174FDE4   71A25DDC   ws2_32.71A25DF0                       ws2_32.71A25DD7               0174FDE0
0174FED8   71A22ACA   ws2_32.GetAddrInfoW                   ws2_32.71A22AC5               0174FED4
0174FF00   30091D75   包含ws2_32.71A22ACA                     Common.30091D73               0174FEFC
0174FF1C   3009EA0D   Common.30091D4F                       Common.3009EA08               0174FF18
0174FF68   300E0AD7   包含Common.3009EA0D                     Common.300E0AD4               0174FF64



0012EAF4  |77D1885A  RETURN to USER32.77D1885A from ntdll.RtlDeactivateActivationContextUnsafeFast



02:32:5d:08:25: 13:8e: 15:01:b1:8a:03:00:00:00:02:01:01:00:00:66:b1:00:00:00:00: bb:de:ac:0e:3b:ac:9d:6d:c3:61:d3:07:7f:cc:f8:ad:83:d1:d9:57:f6:ea:bb:d9:87:68:47:a9:85:08:36:48:b6:f7:77:49:4f:14:6e:0b:90:e5:76:3e:3f:e3:d5:bd:59:77:e6:e5:24:d3:12:37:38:f4:07:dd:18:b3:1d:44:3c:bc:c3:01:90:eb:ae:ea:d3:9c:65:7d:f2:19:0b:3e:58:0b:6a:63:13:37:15:37:a5:b7:8e:34:2e:e5:2c:23:43:1d:66:c5:14:b1:8e:15:fe:d9:78:49:a8:09:c4:57:72:e6:65:20:7f:ba:e4:e8:7a:3a:a8:f8:c7:d7:3a:60:5d:97:05:81:88:1a:2d:27:03
02:32:5d:08:25: 51:91: 15:01:b1:8a:03:00:00:00:02:01:01:00:00:66:b1:00:00:00:00: e0:3b:a2:b3:a2:a3:a2:4d:46:a3:23:89:94:ee:db:d6:fb:46:17:ad:c0:df:2d:f9:b7:44:b2:74:fa:ea:b3:98:72:ca:5a:34:bf:91:95:20:9d:0f:99:7b:13:86:b1:76:07:a4:09:e9:6c:3b:f1:e5:cc:23:c0:4c:fb:3d:41:08:49:7b:94:91:4e:6d:dc:06:dc:53:37:9f:b9:f7:4a:ac:44:45:d2:dc:86:56:b8:a9:62:25:8d:f6:5f:f4:78:04:df:a5:93:68:79:30:5c:2b:cc:ca:89:4a:3c:cb:8c:5b:aa:e8:51:ed:02:93:d1:1c:e0:2b:90:05:00:3c:fd:54:4c:bf:c8:e4:bf:81:6b:9e:03

------------------------
先运行一个OD调试QQ，在 CreateProcessW 断点，单步执行完该方法。
再开一个OD附加到新的QQ进程，一直执行不要有中断，再让主进程的QQ一直执行。再操作调试。
------------------------
先主进程直接运行，不要中断。正常后，再用另一个OD附加到另一个进程调试
------------------------
//查看  __008 sendData 在 SSOPlatf.3434624E 处引用了帐号 11111111
----------------------------
0012C5B8  |3434624E  RETURN to SSOPlatf.3434624E from SSOPlatf.34320C35
0012C5BC  |014D7AB0
0012C5C0  |014CDF1C
0012C5C4  |014CDF1C
0012C5C8  |0012C740
0012C5CC  |EF91AA60
0012C5D0  |00000002
0012C5D4  |014D5160
0012C5D8  |3440BFC8  UNICODE "TXSSO"
0012C5DC  |014D7AB0
0012C5E0  |014CC21C  UNICODE "11111111"
0012C5E4  |00A98AC7
0012C5E8  |34040002  SSOCommo.34040002
0012C5EC  |00000001
0012C5F0  |000013E5
0012C5F4  |00000000
0012C5F8  |02BB0398

------------------------------
34346249    E8 E7A9FDFF     call SSOPlatf.34320C35 
------------------------------
SSOPlatf.3434624E 地址在这个方法: 成员方法
	signed int __thiscall sub_34345F97(void *this, _DWORD *a2)					
			<=[1] int __thiscall sub_34343DAD(int this, int a2, int a3)
				<= int __stdcall sub_3434075A(int a1)  //构造工厂,初始化类? a1是一个类实例指针?
					<= signed int __stdcall sub_34317490(_DWORD *a1) [  v2 = operator new(0x58u); sub_3434075A((int)v2);]
						
			<=[2] int __thiscall sub_343452AD(_DWORD *this, int a2, _DWORD *a3)
				<= int __stdcall sub_3434075A(int a1)
				
				
----
this   ecx  01A35160
01A35160  34413F8C  SSOPlatf.34413F8C
01A35164  00000001
01A35168  34426A50  SSOPlatf.34426A50
01A3516C  01A351C0
01A35170  34426A78  SSOPlatf.34426A78
01A35174  01A351F8
01A35178  34426A78  SSOPlatf.34426A78
01A3517C  01A35230
01A35180  34426A78  SSOPlatf.34426A78
01A35184  01A35268
01A35188  34426AA0  SSOPlatf.34426AA0
01A3518C  01A352A0
01A35190  34426AD0  SSOPlatf.34426AD0
01A35194  01A352E8
01A35198  34426B0C  SSOPlatf.34426B0C
01A3519C  01A35348
01A351A0  01A353C8
01A351A4  00000000
01A351A8  00000000
01A351AC  00000000
01A351B0  00000000
01A351B4  00000000
01A351B8  000C0007
01A351BC  000801E2
01A351C0  34426B40  SSOPlatf.34426B40
01A351C4  00000001
01A351C8  00000000
01A351CC  00000000
01A351D0  00000000
01A351D4  00000000
01A351D8  00000000
01A351DC  00000000
01A351E0  00000000
01A351E4  01A35160
01A351E8  34345972  SSOPlatf.34345972
01A351EC  00000000
01A351F0  00070007
01A351F4  000801EB
01A351F8  34426B5C  SSOPlatf.34426B5C
01A351FC  00000001
01A35200  00000000
01A35204  00000000
01A35208  00000000
01A3520C  00000000
01A35210  00000000
01A35214  00000000
01A35218  00000000
01A3521C  01A35160
01A35220  3434774B  SSOPlatf.3434774B
01A35224  00000000
01A35228  00070007
01A3522C  00080190
01A35230  34426B5C  SSOPlatf.34426B5C
01A35234  00000001
01A35238  00000000
01A3523C  00000000
01A35240  00000000
01A35244  00000000
01A35248  00000000
01A3524C  00000000
01A35250  00000000
01A35254  01A35160
01A35258  34349BAA  SSOPlatf.34349BAA
01A3525C  00000000
01A35260  00070007
01A35264  00080199
01A35268  34426B5C  SSOPlatf.34426B5C
01A3526C  00000001
01A35270  00000000
01A35274  00000000
01A35278  00000000
01A3527C  00000000
01A35280  00000000
01A35284  00000000
01A35288  00000000
01A3528C  01A35160
01A35290  3434A3ED  SSOPlatf.3434A3ED
01A35294  00000000
01A35298  00070009
01A3529C  00080186
01A352A0  34426B78  SSOPlatf.34426B78
01A352A4  00000002
01A352A8  00000000
01A352AC  00000000
01A352B0  00000000
01A352B4  00000000
01A352B8  00000000
01A352BC  00000000
01A352C0  00000000
01A352C4  01A35160
01A352C8  34343DAD  SSOPlatf.34343DAD
01A352CC  00000000
01A352D0  3434411D  SSOPlatf.3434411D
01A352D4  00000000
01A352D8  343442E3  SSOPlatf.343442E3
01A352DC  00000000
01A352E0  0009000C
01A352E4  00080189
01A352E8  34426B9C  SSOPlatf.34426B9C
01A352EC  00000001
01A352F0  00000000
01A352F4  00000000
01A352F8  00000000
01A352FC  00000000
01A35300  00000000
01A35304  00000000
01A35308  00000000
01A3530C  01A35160


				
------------------------------
343DD2E8  ?GetTXDataBuf@Data@Util@@YAHPAUITXDataRead@@PB_WAAVCTXBuffer@@@Z SSOCommon
343DD378  ?AddBuf@CTXCommPack@@QAEHABVCTXBuffer@@@Z SSOCommon
343DD37C  ?AddBuf@CTXCommPack@@QAEHPBEI@Z SSOCommon
343DD384  ?AddUInt64@CTXCommPack@@QAEH_KH@Z SSOCommon
343DD3A0  ?AddPack@CTXCommPack@@QAEHABV1@@Z SSOCommon
343DD3B0  ?GetByte@CTXCommPack@@QAEHAAEH@Z SSOCommond


==================================
//ssoplatform
//日志方法
int __cdecl sub_3430F9BA(int a1, int a2, int a3, int a4, int a5, char a6)
{
  return sub_34304A6F(a2, a3, a4, a5, &a6);
}

//报错日志
int __cdecl sub_3430511B(int a1, int a2, char a3)
{
  return sub_34304A6F(a1, L"func", a2, (const char *)L"%s", &a3);
}

//出现HWND 
int __stdcall sub_34303B4F(int a1, int a2, int a3, HWND hWnd, int a5, int a6, int a7)
	=>Util::SSOData::CreateTXData((Util::SSOData *)a7, v20);



==================================



==================================
//ssocommon
Name                                                           Address  Ordinal
----                                                           -------  -------
Util::Data::CreateTXArray(ITXArray * *)                        34046065 549    
Util::Data::CreateTXArrayFormQQDoc(ITXBuffer *,ITXArray * *)   34046E0B 551    
Util::Data::CreateTXArraySafe(ITXArrayRead *,ITXArrayRead * *) 34045F29 552    
Util::Data::CreateTXBuffer(ITXBuffer * *)                      34046025 553    
Util::Data::CreateTXData(ITXData * *)                          34046045 555    
Util::Data::CreateTXDataFormQQDoc(ITXBuffer *,ITXData * *)     34046D59 557    
Util::Data::CreateTXDataSafe(ITXDataRead *,ITXDataRead * *)    34045E41 558    
Util::SSOData::CreateTXArray(ITXSSOArray * *)                  3400C867 550    
Util::SSOData::CreateTXBuffer(ITXSSOBuffer * *)                3400C827 554    
Util::SSOData::CreateTXData(ITXSSOData * *)                    3400C847 556    
==================================
//ssocommon
Name                                                                        Address  Ordinal
----                                                                        -------  -------
CTXCommPack::CTXCommPack(CTXCommPack const &)                               340061DA 15     
CTXCommPack::CTXCommPack(void)                                              340112A3 16     
CTXCommPack::CreatePack(void)                                               3401132C 548    
CTXCommPack::Swap(CTXCommPack &)                                            340119AC 1495   
CTXCommPack::~CTXCommPack(void)                                             340112CD 105    

CTXCommPack::AddBuf(CTXBuffer const &)                                      34011CB8 298    
CTXCommPack::AddBuf(uchar const *,uint)                                     34011C6E 299    
CTXCommPack::AddBufLenByte(CTXBuffer const &)                               34011CDC 300    
CTXCommPack::AddBufLenDWord(CTXBuffer const &,int)                          34011D5D 301    
CTXCommPack::AddBufLenWord(CTXBuffer const &,int)                           34011D1E 302    
CTXCommPack::AddByte(uchar)                                                 34011C1C 304    
CTXCommPack::AddDWord(ulong,int)                                            34011C25 306    
CTXCommPack::AddPack(CTXCommPack const &)                                   340120D3 317    
CTXCommPack::AddStrA(CTXStringA const &)                                    34011D9C 321    
CTXCommPack::AddStrAEndChar(CTXStringA const &,uchar)                       34011DC0 322    
CTXCommPack::AddStrALenByte(CTXStringA const &)                             34011DE5 323    
CTXCommPack::AddStrALenDWord(CTXStringA const &,int)                        34011E48 324    
CTXCommPack::AddStrALenWord(CTXStringA const &,int)                         34011E18 325    
CTXCommPack::AddStrW(CTXStringW const &)                                    34011E78 326    
CTXCommPack::AddStrWEndChar(CTXStringW const &,uchar)                       34011E9E 327    
CTXCommPack::AddStrWLenByte(CTXStringW const &)                             34011EC3 328    
CTXCommPack::AddStrWLenDWord(CTXStringW const &,int)                        34011F4C 329    
CTXCommPack::AddStrWLenWord(CTXStringW const &,int)                         34011F09 330    
CTXCommPack::AddTLV(uchar,CTXBuffer const &,TXCommPackDataType)             340120E8 331    
CTXCommPack::AddTLV(ulong,CTXBuffer const &,TXCommPackDataType)             34012139 333    
CTXCommPack::AddTLV(ushort,CTXBuffer const &,TXCommPackDataType)            3401210C 332    
CTXCommPack::AddUInt64(unsigned __int64,int)                                34011C47 335    
CTXCommPack::AddVBuf(CTXBuffer const &,TXCommPackDataType)                  34011F8D 336    
CTXCommPack::AddWord(ushort,int)                                            34011BFA 337    
CTXCommPack::CheckBufEndChar(uchar)                                         3401154B 417    
CTXCommPack::CheckBuffer(uint)                                              340117C5 418    
CTXCommPack::CheckOutOverflow(uint)                                         34011429 420    
CTXCommPack::CheckRunMode(CTXCommPack::RunMode)                             340112F0 421    
CTXCommPack::CopyBufferOut(CTXBuffer &)                                     34011759 512    
CTXCommPack::CopyBufferOut(uchar *,uint &)                                  34011358 513    
CTXCommPack::CopyDecodeBufferOut(CTXBuffer &)                               3401178F 514    
CTXCommPack::CopyDecodeBufferOut(uchar *,uint &)                            34011394 515    
CTXCommPack::GetBuf(uchar *,int,int)                                        340114A7 790    
CTXCommPack::GetBuf(uchar const * *,int,int)                                340114F9 791    
CTXCommPack::GetBufferByteLeft(void)                                        3401157F 797    
CTXCommPack::GetBufferOut(CTXBuffer &)                                      3401171D 798    
CTXCommPack::GetBufferOutLen(void)                                          3406C902 800    
CTXCommPack::GetByte(uchar &,int)                                           34011841 803    
CTXCommPack::GetDWord(ulong &,int,int)                                      34011878 828    
CTXCommPack::GetNativeBuffer(void)                                          34011342 889    
CTXCommPack::GetRunMode(void)                                               3400634D 932    
CTXCommPack::GetString(CTXStringW &,int,int,int)                            340118D5 944    
CTXCommPack::GetTLV(uchar &,CTXBuffer &,TXCommPackDataType,int)             34011FC6 952    
CTXCommPack::GetTLV(uchar &,uchar const * *,uint &,TXCommPackDataType,int)  34012048 953    
CTXCommPack::GetTLV(ulong &,CTXBuffer &,TXCommPackDataType,int)             3401201C 956    
CTXCommPack::GetTLV(ulong &,uchar const * *,uint &,TXCommPackDataType,int)  340120A4 957    
CTXCommPack::GetTLV(ushort &,CTXBuffer &,TXCommPackDataType,int)            34011FF0 954    
CTXCommPack::GetTLV(ushort &,uchar const * *,uint &,TXCommPackDataType,int) 34012075 955    
CTXCommPack::GetUInt64(unsigned __int64 &,int,int)                          340118A3 976    
CTXCommPack::GetVBuf(CTXBuffer &,TXCommPackDataType,int)                    34011A24 982    
CTXCommPack::GetVBuf(uchar const * *,uint &,TXCommPackDataType,int)         34011AAB 983    
CTXCommPack::GetWord(ushort &,int,int)                                      3401184A 989    
CTXCommPack::GrowBuffer(uint)                                               340113D0 996    
CTXCommPack::JumpBuf(int)                                                   340115D1 1083   
CTXCommPack::JumpByte(void)                                                 34011975 1084   
CTXCommPack::JumpDWord(void)                                                34011999 1085   
CTXCommPack::JumpWord(void)                                                 34011986 1086   
CTXCommPack::Reset(void)                                                    3401158F 1322   
CTXCommPack::SetBufferEmpty(void)                                           34011346 1365   
CTXCommPack::SetBufferIn(CTXBuffer &,int)                                   3401181A 1366   
CTXCommPack::SetBufferIn(uchar const *,uint,int)                            3401143C 1367   
CTXCommPack::SetGrowLen(uint)                                               34011313 1396   






